{"version":3,"sources":["helpers.tsx","SingleInput.tsx","TotalProjectCost.tsx","PropertyInfo.tsx","DefaultValues.tsx","MonthYearPercentInput.tsx","TotalCostOutOfPocket.tsx","MonthlyMortgagePayment.tsx","TotalIncome.tsx","MonthYearInput.tsx","TotalExpenses.tsx","Evaluation.tsx","Projection.tsx","LoanBalanceValueEquity.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["toCurrency","number","toLocaleString","undefined","maximumFractionDigits","calculateTotalProjectCost","purchasePrice","estimatedRepairs","purchaseClosingCosts","preRentHoldingCosts","calculateLoan","downPaymentPercentage","calculateOutOfPocket","form","calculateValueByPercentage","totalValue","percentage","percentageValue","calculateTotalExpenses","rent","vacancyRate","repairsRate","capitalExpendituresRate","insuranceRate","propertyManagementRate","taxRate","floodInsuranceMonthlyCost","electricityMonthlyCost","waterMonthlyCost","sewerMonthlyCost","gasMonthlyCost","garbageMonthlyCost","hoaMonthlyCost","calculateMonthlyMortgagePayment","calculateMonthlyCashFlow","calculateROIWithoutMortgage","totalExpensesWithoutMortgage","calculateROI","calculateProjectionSalePrice","afterRepairValue","appreciation","projectionYear","Math","pow","calculateProjectionSaleExpenses","calculateProjectionLoanPayoff","loanPeriod","interestRate","loan","getRemainingBalance","originalBalance","numOfPayments","totalNumberOfPayments","rate","monthlyRate","calculateProjectionTotalInvestedCapital","calculateProjectionSaleProfit","calculateProjectionTotalCashflow","calculateProjectionTotalProfit","projectionTotalCashflow","calculateProjectionROI","getNumbersOnly","text","replace","n","i","useLocalStorage","key","initialValue","useState","item","window","localStorage","getItem","JSON","parse","error","console","log","storedValue","setStoredValue","value","valueToStore","Function","setItem","stringify","SingleInput","label","inputName","inputValue","additionalInfoText","handleOnChange","disabled","prefix","suffix","required","roundValue","isNumberInput","isInvalid","ceil","strValue","Number","className","name","onChange","type","TotalProjectCost","PropertyInfo","handleTextOnChange","askingPrice","address","DefaultValues","defaults","handleOnSubmit","React","localDefaults","setLocalDefaults","event","trimmedValue","target","isNaN","showModal","setShowModal","handleClose","Button","variant","onClick","Modal","show","onHide","size","Header","closeButton","Title","Body","Footer","MonthYearPercentInput","wholeMonthlyValue","setFormValueByName","disableYear","monthAppendValue","monthlyValue","handleYearInputOnChange","monthValue","round","yearValue","getYearInput","TotalCostOutOfPocket","outOfPocket","MonthlyMortgagePayment","monthlyMortgagePayment","TotalIncome","MonthYearInput","TotalExpenses","mortgage","Evaluation","Projection","LoanBalanceValueEquity","data","numberOfYear","points","loanPayoff","floor","propertyValue","push","equity","getGraphPoints","width","height","margin","top","right","left","bottom","strokeDasharray","dataKey","verticalAlign","align","stroke","fill","fillOpacity","App","initialDefaults","setDefaults","savedForm","setSavedForm","setForm","newForm","newDefaults","style","marginRight","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.ad2e5be6.chunk.js","sourcesContent":["import { FormData } from \"./App\";\r\nimport { useState } from \"react\";\r\n\r\nexport const toCurrency = (number: number): string => {\r\n  const formattedValue = number.toLocaleString(undefined, {\r\n    maximumFractionDigits: 2,\r\n  });\r\n\r\n  return formattedValue;\r\n};\r\n\r\nexport const calculateTotalProjectCost = ({\r\n  purchasePrice,\r\n  estimatedRepairs,\r\n  purchaseClosingCosts,\r\n  preRentHoldingCosts,\r\n}: FormData): number => {\r\n  const totalProjectCost =\r\n    (purchasePrice || 0) +\r\n    (estimatedRepairs || 0) +\r\n    (purchaseClosingCosts || 0) +\r\n    (preRentHoldingCosts || 0);\r\n  return totalProjectCost;\r\n};\r\n\r\nexport const calculateLoan = ({\r\n  downPaymentPercentage = 0,\r\n  purchasePrice = 0,\r\n}: FormData): number => {\r\n  const loan = (purchasePrice * (100 - downPaymentPercentage)) / 100;\r\n\r\n  return loan;\r\n};\r\n\r\nexport const calculateOutOfPocket = (form: FormData): number => {\r\n  const totalProjectCost = calculateTotalProjectCost(form);\r\n  const loan = calculateLoan(form);\r\n  const outOfPocket = totalProjectCost - loan;\r\n\r\n  return outOfPocket;\r\n};\r\n\r\nexport const calculateValueByPercentage = (totalValue = 0, percentage = 0) => {\r\n  const percentageValue = (percentage / 100) * totalValue;\r\n\r\n  return percentageValue;\r\n};\r\n\r\nexport const calculateTotalExpenses = (form: FormData) => {\r\n  const {\r\n    rent,\r\n    vacancyRate,\r\n    repairsRate,\r\n    capitalExpendituresRate,\r\n    insuranceRate,\r\n    propertyManagementRate,\r\n    purchasePrice,\r\n    taxRate,\r\n    floodInsuranceMonthlyCost,\r\n    electricityMonthlyCost,\r\n    waterMonthlyCost,\r\n    sewerMonthlyCost,\r\n    gasMonthlyCost,\r\n    garbageMonthlyCost,\r\n    hoaMonthlyCost,\r\n  } = form;\r\n  const mortgage = calculateMonthlyMortgagePayment(form);\r\n  const vacancyCost = calculateValueByPercentage(rent, vacancyRate);\r\n  const repairsCost = calculateValueByPercentage(rent, repairsRate);\r\n  const capitalExpendituresCost = calculateValueByPercentage(\r\n    rent,\r\n    capitalExpendituresRate\r\n  );\r\n  const insuranceCost = calculateValueByPercentage(\r\n    purchasePrice / 12,\r\n    insuranceRate\r\n  );\r\n  const taxCost = calculateValueByPercentage(purchasePrice / 12, taxRate);\r\n  const propertyManagementMonthlyCost = calculateValueByPercentage(\r\n    rent,\r\n    propertyManagementRate\r\n  );\r\n\r\n  const totalExpenses =\r\n    mortgage +\r\n    vacancyCost +\r\n    repairsCost +\r\n    capitalExpendituresCost +\r\n    insuranceCost +\r\n    taxCost +\r\n    (floodInsuranceMonthlyCost || 0) +\r\n    (electricityMonthlyCost || 0) +\r\n    (waterMonthlyCost || 0) +\r\n    (sewerMonthlyCost || 0) +\r\n    (gasMonthlyCost || 0) +\r\n    (garbageMonthlyCost || 0) +\r\n    (hoaMonthlyCost || 0) +\r\n    propertyManagementMonthlyCost;\r\n\r\n  return totalExpenses;\r\n};\r\n\r\nexport const calculateMonthlyCashFlow = (form: FormData) => {\r\n  const cashflow = form.rent - calculateTotalExpenses(form);\r\n\r\n  return cashflow;\r\n};\r\n\r\nexport const calculateROIWithoutMortgage = (form: FormData) => {\r\n  const totalExpensesWithoutMortgage =\r\n    calculateTotalExpenses(form) - calculateMonthlyMortgagePayment(form);\r\n\r\n  const ROIWithoutMortgage =\r\n    (((form.rent - totalExpensesWithoutMortgage) * 12) /\r\n      calculateOutOfPocket(form)) *\r\n    100;\r\n\r\n  return ROIWithoutMortgage;\r\n};\r\n\r\nexport const calculateROI = (form: FormData) => {\r\n  const cashflow = calculateMonthlyCashFlow(form);\r\n  const ROI = ((cashflow * 12) / calculateOutOfPocket(form)) * 100;\r\n\r\n  return ROI;\r\n};\r\n\r\nexport const calculateProjectionSalePrice = ({\r\n  afterRepairValue,\r\n  appreciation,\r\n  projectionYear,\r\n}: FormData) => {\r\n  // calculate compound interest\r\n  // A = P(1 + r/n)^(nt) where P = principal, r = rate, n = compound (1 if annualy) and t = time (in years)\r\n  const salePrice =\r\n    afterRepairValue * Math.pow(1 + appreciation / 100, projectionYear);\r\n\r\n  return salePrice;\r\n};\r\n\r\nexport const calculateProjectionSaleExpenses = ({\r\n  afterRepairValue,\r\n}: FormData) => {\r\n  // 6% agent cost, $4000 closing costs, $5000 new paint cost\r\n  const saleExpenses = afterRepairValue * 0.06 + 4000 + 5000;\r\n\r\n  return saleExpenses;\r\n};\r\n\r\nexport const calculateProjectionLoanPayoff = (form: FormData) => {\r\n  const { projectionYear, loanPeriod, interestRate } = form;\r\n  const loan = calculateLoan(form);\r\n\r\n  var loanPayoff = getRemainingBalance(\r\n    loan,\r\n    projectionYear * 12,\r\n    loanPeriod * 12,\r\n    interestRate / 100\r\n  );\r\n\r\n  return loanPayoff;\r\n};\r\n\r\nconst getRemainingBalance = (\r\n  originalBalance: number,\r\n  numOfPayments: number,\r\n  totalNumberOfPayments: number,\r\n  rate: number\r\n) => {\r\n  // https://www.mtgprofessor.com/formulas.htm\r\n  const monthlyRate = rate / 12; // monthly\r\n\r\n  const remainingBalance =\r\n    (originalBalance *\r\n      (Math.pow(1 + monthlyRate, totalNumberOfPayments) -\r\n        Math.pow(1 + monthlyRate, numOfPayments))) /\r\n    (Math.pow(1 + monthlyRate, totalNumberOfPayments) - 1);\r\n\r\n  return remainingBalance;\r\n};\r\n\r\nexport const calculateProjectionTotalInvestedCapital = (form: FormData) => {\r\n  const totalInvestedCapital = calculateOutOfPocket(form);\r\n\r\n  return totalInvestedCapital;\r\n};\r\n\r\nexport const calculateProjectionSaleProfit = (form: FormData) => {\r\n  const salePrice = calculateProjectionSalePrice(form);\r\n  const saleExpenses = calculateProjectionSaleExpenses(form);\r\n  const loanPayoff = calculateProjectionLoanPayoff(form);\r\n  const totalInvestedCapital = calculateOutOfPocket(form);\r\n\r\n  const saleProfit =\r\n    salePrice - saleExpenses - loanPayoff - totalInvestedCapital;\r\n\r\n  return saleProfit;\r\n};\r\n\r\nexport const calculateProjectionTotalCashflow = (form: FormData) => {\r\n  const projectionYear = form.projectionYear;\r\n  const cashflow = calculateMonthlyCashFlow(form);\r\n  const projectionTotalCashflow = cashflow * 12 * projectionYear;\r\n\r\n  return projectionTotalCashflow;\r\n};\r\n\r\nexport const calculateProjectionTotalProfit = (form: FormData) => {\r\n  const projectionTotalCashflow = calculateProjectionTotalCashflow(form);\r\n  const saleProfit = calculateProjectionSaleProfit(form);\r\n\r\n  const totalProfit = saleProfit + projectionTotalCashflow;\r\n\r\n  return totalProfit;\r\n};\r\nexport const calculateProjectionROI = (form: FormData) => {\r\n  const totalProfit = calculateProjectionTotalProfit(form);\r\n  const totalInvestedCapital = calculateOutOfPocket(form);\r\n  const year = form.projectionYear;\r\n\r\n  const projectedROI = (totalProfit / totalInvestedCapital / year) * 100;\r\n  return projectedROI;\r\n};\r\n\r\nexport const getNumbersOnly = (text: string) => {\r\n  return text.replace(/\\D/g, \"\");\r\n};\r\n\r\nexport const calculateMonthlyMortgagePayment = (form: FormData) => {\r\n  const { loanPeriod, interestRate } = form;\r\n  const loan = calculateLoan(form);\r\n\r\n  // allow calculation for 0% interest rate\r\n  if (!interestRate) {\r\n    return loan / (loanPeriod * 12);\r\n  }\r\n\r\n  // https://www.thebalance.com/calculate-mortgage-315668\r\n  // P = A/D where D = {[(1 + i) ^n] - 1} / [i(1 + i)^n]\r\n  const n = loanPeriod * 12; // 12 months\r\n  const i = interestRate / 100 / 12; // 12 months\r\n  const D = (Math.pow(1 + i, n) - 1) / (i * Math.pow(1 + i, n));\r\n  const monthlyMortgagePayment = loan / D;\r\n\r\n  return monthlyMortgagePayment;\r\n};\r\n\r\nexport const useLocalStorage = (key: string, initialValue: any) => {\r\n  // State to store our value\r\n  // Pass initial state function to useState so logic is only executed once\r\n  const [storedValue, setStoredValue] = useState(() => {\r\n    try {\r\n      // Get from local storage by key\r\n      const item = window.localStorage.getItem(key);\r\n      // Parse stored json or if none return initialValue\r\n      return item ? JSON.parse(item) : initialValue;\r\n    } catch (error) {\r\n      // If error also return initialValue\r\n      console.log(error);\r\n      return initialValue;\r\n    }\r\n  });\r\n\r\n  // Return a wrapped version of useState's setter function that ...\r\n  // ... persists the new value to localStorage.\r\n  const setValue = (value: any) => {\r\n    try {\r\n      // Allow value to be a function so we have same API as useState\r\n      const valueToStore =\r\n        value instanceof Function ? value(storedValue) : value;\r\n      // Save state\r\n      setStoredValue(valueToStore);\r\n      // Save to local storage\r\n      window.localStorage.setItem(key, JSON.stringify(valueToStore));\r\n    } catch (error) {\r\n      // A more advanced implementation would handle the error case\r\n      console.log(error);\r\n    }\r\n  };\r\n\r\n  return [storedValue, setValue];\r\n};\r\n","import React from \"react\";\r\nimport { toCurrency } from \"./helpers\";\r\n\r\ninterface Props {\r\n  label: string;\r\n  inputName?: string;\r\n  inputValue: number;\r\n  additionalInfoText?: string;\r\n  disabled?: boolean;\r\n  prefix?: string;\r\n  suffix?: string;\r\n  required?: boolean;\r\n  roundValue?: boolean;\r\n  isNumberInput?: boolean;\r\n  handleOnChange?: (event: React.ChangeEvent<HTMLInputElement>) => void;\r\n}\r\n\r\nconst SingleInput = ({\r\n  label,\r\n  inputName,\r\n  inputValue,\r\n  additionalInfoText,\r\n  handleOnChange,\r\n  disabled,\r\n  prefix,\r\n  suffix,\r\n  required,\r\n  roundValue = true,\r\n  isNumberInput,\r\n}: Props) => {\r\n  let isInvalid = \"\";\r\n  if (required && !inputValue) {\r\n    isInvalid = \"is-invalid\";\r\n  }\r\n\r\n  let value = roundValue ? Math.ceil(inputValue) : inputValue;\r\n\r\n  const strValue = value ? toCurrency(Number(value)) : \"\";\r\n\r\n  return (\r\n    <div className=\"input-group row py-1 \">\r\n      <label className=\"col-md-2\">{label}</label>\r\n      <div className=\"col-md-4\">\r\n        <div className=\"input-group\">\r\n          <div className=\"input-group-prepend\">\r\n            <span className=\"input-group-text\">{prefix}</span>\r\n          </div>\r\n          <input\r\n            className={\"form-control \" + isInvalid}\r\n            name={inputName}\r\n            value={strValue}\r\n            onChange={handleOnChange}\r\n            disabled={disabled}\r\n            type={isNumberInput ? \"number\" : \"\"}\r\n          />\r\n          <div className=\"input-group-append\">\r\n            <span className=\"input-group-text\">{suffix}</span>\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <div className=\"col-md-2\">{additionalInfoText}</div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SingleInput;\r\n","import React from \"react\";\r\nimport SingleInput from \"./SingleInput\";\r\nimport { FormData } from \"./App\";\r\nimport { calculateTotalProjectCost, toCurrency } from \"./helpers\";\r\n\r\ninterface Props {\r\n  form: FormData;\r\n  handleOnChange: (event: React.ChangeEvent<HTMLInputElement>) => void;\r\n}\r\n\r\nconst TotalProjectCost = ({ form, handleOnChange }: Props) => {\r\n  const {\r\n    purchasePrice,\r\n    purchaseClosingCosts,\r\n    preRentHoldingCosts,\r\n    estimatedRepairs,\r\n  } = form;\r\n  return (\r\n    <div>\r\n      <h2>\r\n        1) Total Project Cost: ${toCurrency(calculateTotalProjectCost(form))}\r\n      </h2>\r\n      <SingleInput\r\n        label=\"Purchase Price\"\r\n        inputValue={purchasePrice}\r\n        inputName=\"purchasePrice\"\r\n        handleOnChange={handleOnChange}\r\n        prefix={\"$\"}\r\n        required={true}\r\n      />\r\n      <SingleInput\r\n        label=\"Purchase Closing Costs\"\r\n        inputValue={purchaseClosingCosts}\r\n        inputName=\"purchaseClosingCosts\"\r\n        handleOnChange={handleOnChange}\r\n        prefix={\"$\"}\r\n      />\r\n\r\n      <SingleInput\r\n        label=\"Pre-Rent Holding Costs\"\r\n        inputValue={preRentHoldingCosts}\r\n        inputName=\"preRentHoldingCosts\"\r\n        handleOnChange={handleOnChange}\r\n        prefix={\"$\"}\r\n      />\r\n\r\n      <SingleInput\r\n        label=\"Estimated Repairs\"\r\n        inputValue={estimatedRepairs}\r\n        inputName=\"estimatedRepairs\"\r\n        handleOnChange={handleOnChange}\r\n        prefix={\"$\"}\r\n      />\r\n\r\n      <SingleInput\r\n        label=\"Total Project Cost\"\r\n        inputValue={calculateTotalProjectCost(form)}\r\n        prefix={\"$\"}\r\n        disabled={true}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default TotalProjectCost;\r\n","import React from \"react\";\r\nimport SingleInput from \"./SingleInput\";\r\nimport { FormData } from \"./App\";\r\n\r\ninterface Props {\r\n  form: FormData;\r\n  handleOnChange: (event: React.ChangeEvent<HTMLInputElement>) => void;\r\n  handleTextOnChange: (event: React.ChangeEvent<HTMLInputElement>) => void;\r\n}\r\n\r\nconst PropertyInfo = ({ form, handleOnChange, handleTextOnChange }: Props) => {\r\n  const { askingPrice } = form;\r\n  return (\r\n    <div>\r\n      <div className=\"input-group row py-1\">\r\n        <label className=\"col-md-2\">Address</label>\r\n        <div className=\"col-md-4\">\r\n          <div className=\"input-group\">\r\n            <input\r\n              className={\"form-control\"}\r\n              name={\"address\"}\r\n              value={form.address}\r\n              onChange={handleTextOnChange}\r\n              type={\"text\"}\r\n            />\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <SingleInput\r\n        label=\"Asking Price\"\r\n        inputName=\"askingPrice\"\r\n        inputValue={askingPrice}\r\n        handleOnChange={handleOnChange}\r\n        prefix={\"$\"}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default PropertyInfo;\r\n","import React from \"react\";\r\nimport SingleInput from \"./SingleInput\";\r\nimport { FormData } from \"./App\";\r\nimport { Button, Modal } from \"react-bootstrap\";\r\n\r\ninterface Props {\r\n  defaults: FormData;\r\n  handleOnSubmit: (defaults: FormData) => void;\r\n}\r\n\r\nconst DefaultValues = ({ defaults, handleOnSubmit }: Props) => {\r\n  const [localDefaults, setLocalDefaults] = React.useState({ ...defaults });\r\n\r\n  const handleOnChange = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n    const trimmedValue = event.target.value.replace(/,/g, \"\");\r\n    if (!isNaN(Number(trimmedValue))) {\r\n      setLocalDefaults({\r\n        ...localDefaults,\r\n        [event.target.name]: Number(trimmedValue),\r\n      });\r\n    }\r\n  };\r\n\r\n  const [showModal, setShowModal] = React.useState(false);\r\n\r\n  const handleClose = () => setShowModal(false);\r\n  const handleShow = () => setShowModal(true);\r\n\r\n  const handleOnSumbit = () => {\r\n    handleOnSubmit(localDefaults);\r\n\r\n    handleClose();\r\n  };\r\n\r\n  const {\r\n    purchaseClosingCosts,\r\n    loanPeriod,\r\n    interestRate,\r\n    downPaymentPercentage,\r\n    vacancyRate,\r\n    repairsRate,\r\n    capitalExpendituresRate,\r\n    insuranceRate,\r\n    taxRate,\r\n    propertyManagementRate,\r\n    projectionYear,\r\n    appreciation,\r\n  } = localDefaults;\r\n\r\n  return (\r\n    <>\r\n      <Button variant=\"primary\" onClick={handleShow} className=\"float-right\">\r\n        Edit Defaults\r\n      </Button>\r\n      <Modal show={showModal} onHide={handleClose} size=\"lg\">\r\n        <Modal.Header closeButton>\r\n          <Modal.Title>Defaults</Modal.Title>\r\n        </Modal.Header>\r\n        <Modal.Body>\r\n          <form>\r\n            <div>\r\n              <SingleInput\r\n                label=\"Purchase Closing Costs\"\r\n                inputName=\"purchaseClosingCosts\"\r\n                inputValue={purchaseClosingCosts}\r\n                handleOnChange={handleOnChange}\r\n                prefix={\"$\"}\r\n              />\r\n              <SingleInput\r\n                label=\"Loan Period\"\r\n                inputName=\"loanPeriod\"\r\n                inputValue={loanPeriod}\r\n                handleOnChange={handleOnChange}\r\n                suffix={\"years\"}\r\n                roundValue={false}\r\n                isNumberInput\r\n              />\r\n              <SingleInput\r\n                label=\"Interest Rate\"\r\n                inputName=\"interestRate\"\r\n                inputValue={interestRate}\r\n                handleOnChange={handleOnChange}\r\n                suffix={\"%\"}\r\n                roundValue={false}\r\n                isNumberInput\r\n              />\r\n              <SingleInput\r\n                label=\"Down Payment Percentage\"\r\n                inputName=\"downPaymentPercentage\"\r\n                inputValue={downPaymentPercentage}\r\n                handleOnChange={handleOnChange}\r\n                suffix={\"%\"}\r\n                roundValue={false}\r\n                isNumberInput\r\n              />\r\n              <SingleInput\r\n                label=\"Vacancy Rate\"\r\n                inputName=\"vacancyRate\"\r\n                inputValue={vacancyRate}\r\n                handleOnChange={handleOnChange}\r\n                suffix={\"%\"}\r\n                roundValue={false}\r\n                isNumberInput\r\n              />\r\n              <SingleInput\r\n                label=\"Repair Percentage\"\r\n                inputName=\"repairsRate\"\r\n                inputValue={repairsRate}\r\n                handleOnChange={handleOnChange}\r\n                suffix={\"%\"}\r\n                roundValue={false}\r\n                isNumberInput\r\n              />\r\n              <SingleInput\r\n                label=\"Capital Expenditure Percentage\"\r\n                inputName=\"capitalExpendituresRate\"\r\n                inputValue={capitalExpendituresRate}\r\n                handleOnChange={handleOnChange}\r\n                suffix={\"%\"}\r\n                roundValue={false}\r\n                isNumberInput\r\n              />\r\n              <SingleInput\r\n                label=\"Insurance Rate\"\r\n                inputName=\"insuranceRate\"\r\n                inputValue={insuranceRate}\r\n                handleOnChange={handleOnChange}\r\n                suffix={\"%\"}\r\n                roundValue={false}\r\n                isNumberInput\r\n              />\r\n              <SingleInput\r\n                label=\"Tax Rate\"\r\n                inputName=\"taxRate\"\r\n                inputValue={taxRate}\r\n                handleOnChange={handleOnChange}\r\n                suffix={\"%\"}\r\n                roundValue={false}\r\n                isNumberInput\r\n              />\r\n              <SingleInput\r\n                label=\"Property Management Rate\"\r\n                inputName=\"propertyManagementRate\"\r\n                inputValue={propertyManagementRate}\r\n                handleOnChange={handleOnChange}\r\n                suffix={\"%\"}\r\n                roundValue={false}\r\n                isNumberInput\r\n              />\r\n              <SingleInput\r\n                label=\"Projection Year\"\r\n                inputName=\"projectionYear\"\r\n                inputValue={projectionYear}\r\n                handleOnChange={handleOnChange}\r\n                suffix={\"years\"}\r\n                roundValue={false}\r\n                isNumberInput\r\n              />\r\n              <SingleInput\r\n                label=\"Appreciation\"\r\n                inputName=\"appreciation\"\r\n                inputValue={appreciation}\r\n                handleOnChange={handleOnChange}\r\n                suffix={\"%\"}\r\n                roundValue={false}\r\n                isNumberInput\r\n              />\r\n            </div>\r\n          </form>\r\n        </Modal.Body>\r\n        <Modal.Footer>\r\n          <Button variant=\"primary\" onClick={handleOnSumbit}>\r\n            Save Changes\r\n          </Button>\r\n        </Modal.Footer>\r\n      </Modal>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default DefaultValues;\r\n","import React from \"react\";\r\nimport {\r\n  calculateValueByPercentage,\r\n  getNumbersOnly,\r\n  toCurrency,\r\n} from \"./helpers\";\r\n\r\ninterface Props {\r\n  label: string;\r\n  inputName: string;\r\n  inputValue?: number;\r\n  additionalInfoText?: string;\r\n  disabled?: boolean;\r\n  prefix?: string;\r\n  suffix?: string;\r\n  required?: boolean;\r\n  roundValue?: boolean;\r\n  isNumberInput?: boolean;\r\n  handleOnChange?: (event: React.ChangeEvent<HTMLInputElement>) => void;\r\n  setFormValueByName: (inputName: string, value: number) => void;\r\n  percentageValue: number;\r\n  wholeMonthlyValue: number;\r\n  disableYear?: boolean;\r\n  monthAppendValue?: string;\r\n}\r\n\r\nconst MonthYearPercentInput = ({\r\n  label,\r\n  inputName,\r\n  additionalInfoText,\r\n  percentageValue,\r\n  wholeMonthlyValue,\r\n  handleOnChange,\r\n  setFormValueByName,\r\n  disableYear,\r\n  monthAppendValue,\r\n}: Props) => {\r\n  const monthlyValue = calculateValueByPercentage(\r\n    wholeMonthlyValue,\r\n    percentageValue\r\n  );\r\n\r\n  const handleYearInputOnChange = (\r\n    event: React.ChangeEvent<HTMLInputElement>\r\n  ) => {\r\n    const value =\r\n      (Number(getNumbersOnly(event.target.value)) / 12 / wholeMonthlyValue) *\r\n      100;\r\n    setFormValueByName(inputName, value);\r\n  };\r\n\r\n  const handleMonthInputOnChange = (\r\n    event: React.ChangeEvent<HTMLInputElement>\r\n  ) => {\r\n    const value =\r\n      (Number(getNumbersOnly(event.target.value)) / wholeMonthlyValue) * 100;\r\n    setFormValueByName(inputName, value);\r\n  };\r\n\r\n  const monthValue = monthlyValue ? toCurrency(Math.ceil(monthlyValue)) : \"\";\r\n\r\n  const value = Math.round(percentageValue * 100) / 100;\r\n  const getYearInput = () => {\r\n    if (disableYear) {\r\n      return null;\r\n    }\r\n\r\n    const yearValue = monthlyValue\r\n      ? toCurrency(Math.ceil(monthlyValue * 12))\r\n      : \"\";\r\n    return (\r\n      <div className=\"col-md-3\">\r\n        <div className=\"input-group\">\r\n          <input\r\n            className=\"form-control\"\r\n            value={yearValue}\r\n            onChange={handleYearInputOnChange}\r\n          />\r\n          <div className=\"input-group-append\">\r\n            <span className=\"input-group-text\">/yr.</span>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  };\r\n  return (\r\n    <div className=\"input-group row py-1\">\r\n      <label className=\"col-md-2\">{label}</label>\r\n      {/* Monthly Input */}\r\n      <div className=\"col-md-4\">\r\n        <div className=\"input-group\">\r\n          <div className=\"input-group-prepend\">\r\n            <span className=\"input-group-text\">$</span>\r\n          </div>\r\n          <input\r\n            className=\"form-control\"\r\n            value={monthValue}\r\n            onChange={handleMonthInputOnChange}\r\n          />\r\n          <div className=\"input-group-append\">\r\n            <span className=\"input-group-text\">{monthAppendValue}</span>\r\n          </div>\r\n        </div>\r\n      </div>\r\n      {getYearInput()}\r\n      {/* Percentage Input */}\r\n      <div className=\"col-md-3\">\r\n        <div className=\"input-group\">\r\n          <input\r\n            className=\"form-control\"\r\n            type=\"number\"\r\n            value={value}\r\n            name={inputName}\r\n            onChange={handleOnChange}\r\n          />\r\n          <div className=\"input-group-append\">\r\n            <span className=\"input-group-text\">%</span>\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <div className=\"col-md-12\">\r\n        <span className=\"mx-auto\">{additionalInfoText}</span>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default MonthYearPercentInput;\r\n","import React from \"react\";\r\nimport SingleInput from \"./SingleInput\";\r\nimport { FormData } from \"./App\";\r\nimport { calculateLoan, calculateOutOfPocket, toCurrency } from \"./helpers\";\r\nimport MonthYearPercentInput from \"./MonthYearPercentInput\";\r\n\r\ninterface Props {\r\n  form: FormData;\r\n  handleOnChange: (event: React.ChangeEvent<HTMLInputElement>) => void;\r\n  setFormValueByName: (inputName: string, value: number) => void;\r\n}\r\n\r\nconst TotalCostOutOfPocket = ({\r\n  form,\r\n  handleOnChange,\r\n  setFormValueByName,\r\n}: Props) => {\r\n  const { downPaymentPercentage, purchasePrice } = form;\r\n\r\n  const loan = calculateLoan(form);\r\n  const outOfPocket = calculateOutOfPocket(form);\r\n\r\n  return (\r\n    <div>\r\n      <h2>\r\n        2) Total Cost Out of Pocket: ${toCurrency(calculateOutOfPocket(form))}\r\n      </h2>\r\n      <MonthYearPercentInput\r\n        label=\"Down Payment\"\r\n        inputName=\"downPaymentPercentage\"\r\n        percentageValue={downPaymentPercentage}\r\n        wholeMonthlyValue={purchasePrice}\r\n        handleOnChange={handleOnChange}\r\n        setFormValueByName={setFormValueByName}\r\n        disableYear={true}\r\n      />\r\n\r\n      <SingleInput\r\n        label=\"Loan\"\r\n        prefix={\"$\"}\r\n        disabled={true}\r\n        inputValue={loan}\r\n      />\r\n\r\n      <SingleInput\r\n        label=\"Out of Pocket\"\r\n        inputValue={outOfPocket}\r\n        prefix={\"$\"}\r\n        disabled={true}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default TotalCostOutOfPocket;\r\n","import React from \"react\";\r\nimport SingleInput from \"./SingleInput\";\r\nimport { FormData } from \"./App\";\r\nimport { calculateMonthlyMortgagePayment, toCurrency } from \"./helpers\";\r\n\r\ninterface Props {\r\n  form: FormData;\r\n  handleOnChange: (event: React.ChangeEvent<HTMLInputElement>) => void;\r\n}\r\n\r\nconst MonthlyMortgagePayment = ({ form, handleOnChange }: Props) => {\r\n  const { loanPeriod, interestRate } = form;\r\n\r\n  const monthlyMortgagePayment = calculateMonthlyMortgagePayment(form);\r\n\r\n  return (\r\n    <div>\r\n      <h2>\r\n        3) Monthly Mortgage Payment: ${toCurrency(monthlyMortgagePayment)}\r\n        /mo.\r\n      </h2>\r\n      <SingleInput\r\n        label=\"Loan Period\"\r\n        inputValue={loanPeriod}\r\n        inputName=\"loanPeriod\"\r\n        handleOnChange={handleOnChange}\r\n        suffix=\"years\"\r\n      />\r\n\r\n      <SingleInput\r\n        label=\"Interest Rate\"\r\n        inputValue={interestRate}\r\n        inputName=\"interestRate\"\r\n        handleOnChange={handleOnChange}\r\n        suffix=\"%\"\r\n        roundValue={false}\r\n        isNumberInput\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default MonthlyMortgagePayment;\r\n","import React from \"react\";\r\nimport SingleInput from \"./SingleInput\";\r\nimport { FormData } from \"./App\";\r\nimport { toCurrency } from \"./helpers\";\r\n\r\ninterface Props {\r\n  form: FormData;\r\n  handleOnChange: (event: React.ChangeEvent<HTMLInputElement>) => void;\r\n}\r\n\r\nconst TotalIncome = ({ form, handleOnChange }: Props) => {\r\n  const { rent } = form;\r\n  return (\r\n    <div>\r\n      <h2>4) Total Income: $ {toCurrency(rent || 0)}/mo.</h2>\r\n\r\n      <SingleInput\r\n        label=\"Rent\"\r\n        inputValue={rent}\r\n        inputName=\"rent\"\r\n        handleOnChange={handleOnChange}\r\n        prefix={\"$\"}\r\n        suffix=\"/mo.\"\r\n        required={true}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default TotalIncome;\r\n","import React from \"react\";\r\nimport { toCurrency } from \"./helpers\";\r\n\r\ninterface Props {\r\n  label: string;\r\n  inputName: string;\r\n  inputValue?: number;\r\n  handleOnChange?: (event: React.ChangeEvent<HTMLInputElement>) => void;\r\n  setFormValueByName: (inputName: string, value: number) => void;\r\n}\r\n\r\nconst MonthYearInput = ({\r\n  label,\r\n  inputName,\r\n  inputValue,\r\n  handleOnChange,\r\n  setFormValueByName,\r\n}: Props) => {\r\n  const handleYearInputOnChange = (\r\n    event: React.ChangeEvent<HTMLInputElement>\r\n  ) => {\r\n    const value = Number(event.target.value.replace(/\\D/g, \"\")) / 12;\r\n    setFormValueByName(inputName, value);\r\n  };\r\n\r\n  return (\r\n    <div className=\"input-group row py-1 \">\r\n      <label className=\"col-md-2\">{label}</label>\r\n      <div className=\"col-md-4\">\r\n        <div className=\"input-group\">\r\n          <div className=\"input-group-prepend\">\r\n            <span className=\"input-group-text\">$</span>\r\n          </div>\r\n          <input\r\n            className=\"form-control\"\r\n            name={inputName}\r\n            value={inputValue ? toCurrency(Math.ceil(inputValue)) : \"\"}\r\n            onChange={handleOnChange}\r\n          />\r\n          <div className=\"input-group-append\">\r\n            <span className=\"input-group-text\">/mo.</span>\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <div className=\"col-md-3\">\r\n        <div className=\"input-group\">\r\n          <input\r\n            className=\"form-control\"\r\n            value={inputValue ? toCurrency(inputValue * 12) : \"\"}\r\n            onChange={handleYearInputOnChange}\r\n          />\r\n          <div className=\"input-group-append\">\r\n            <span className=\"input-group-text\">/yr.</span>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default MonthYearInput;\r\n","import React from \"react\";\r\nimport SingleInput from \"./SingleInput\";\r\nimport MonthYearPercentInput from \"./MonthYearPercentInput\";\r\nimport {\r\n  calculateMonthlyMortgagePayment,\r\n  toCurrency,\r\n  calculateTotalExpenses,\r\n} from \"./helpers\";\r\nimport { FormData } from \"./App\";\r\nimport MonthYearInput from \"./MonthYearInput\";\r\n\r\ninterface Props {\r\n  form: FormData;\r\n  handleOnChange: (event: React.ChangeEvent<HTMLInputElement>) => void;\r\n  setFormValueByName: (inputName: string, value: number) => void;\r\n}\r\n\r\nconst TotalExpenses = ({ form, handleOnChange, setFormValueByName }: Props) => {\r\n  const mortgage = calculateMonthlyMortgagePayment(form);\r\n\r\n  return (\r\n    <div>\r\n      <h2>\r\n        5) Total Expenses: $ {toCurrency(calculateTotalExpenses(form))}\r\n        /mo.\r\n      </h2>\r\n      <SingleInput\r\n        label=\"Mortgage\"\r\n        inputValue={mortgage}\r\n        disabled={true}\r\n        prefix=\"$\"\r\n        suffix=\"/mo.\"\r\n      />\r\n\r\n      <MonthYearPercentInput\r\n        label=\"Vacancy\"\r\n        inputName=\"vacancyRate\"\r\n        percentageValue={form.vacancyRate}\r\n        wholeMonthlyValue={form.rent}\r\n        handleOnChange={handleOnChange}\r\n        setFormValueByName={setFormValueByName}\r\n        monthAppendValue=\"/mo.\"\r\n      />\r\n      <MonthYearPercentInput\r\n        label=\"Repairs\"\r\n        inputName=\"repairsRate\"\r\n        percentageValue={form.repairsRate}\r\n        wholeMonthlyValue={form.rent}\r\n        handleOnChange={handleOnChange}\r\n        setFormValueByName={setFormValueByName}\r\n        monthAppendValue=\"/mo.\"\r\n      />\r\n      <MonthYearPercentInput\r\n        label=\"Capital Expenditures\"\r\n        inputName=\"capitalExpendituresRate\"\r\n        percentageValue={form.capitalExpendituresRate}\r\n        wholeMonthlyValue={form.rent}\r\n        handleOnChange={handleOnChange}\r\n        setFormValueByName={setFormValueByName}\r\n        monthAppendValue=\"/mo.\"\r\n      />\r\n      <MonthYearPercentInput\r\n        label=\"Insurance\"\r\n        inputName=\"insuranceRate\"\r\n        percentageValue={form.insuranceRate}\r\n        wholeMonthlyValue={form.purchasePrice / 12}\r\n        handleOnChange={handleOnChange}\r\n        setFormValueByName={setFormValueByName}\r\n        monthAppendValue=\"/mo.\"\r\n      />\r\n      <MonthYearPercentInput\r\n        label=\"Taxes\"\r\n        inputName=\"taxRate\"\r\n        percentageValue={form.taxRate}\r\n        wholeMonthlyValue={form.purchasePrice / 12}\r\n        handleOnChange={handleOnChange}\r\n        setFormValueByName={setFormValueByName}\r\n        monthAppendValue=\"/mo.\"\r\n      />\r\n      <MonthYearInput\r\n        label=\"Flood Insurance\"\r\n        inputName=\"floodInsuranceMonthlyCost\"\r\n        inputValue={form.floodInsuranceMonthlyCost}\r\n        handleOnChange={handleOnChange}\r\n        setFormValueByName={setFormValueByName}\r\n      />\r\n      <MonthYearInput\r\n        label=\"Electricity\"\r\n        inputName=\"electricityMonthlyCost\"\r\n        inputValue={form.electricityMonthlyCost}\r\n        handleOnChange={handleOnChange}\r\n        setFormValueByName={setFormValueByName}\r\n      />\r\n      <MonthYearInput\r\n        label=\"Water\"\r\n        inputName=\"waterMonthlyCost\"\r\n        inputValue={form.waterMonthlyCost}\r\n        handleOnChange={handleOnChange}\r\n        setFormValueByName={setFormValueByName}\r\n      />\r\n      <MonthYearInput\r\n        label=\"Sewer\"\r\n        inputName=\"sewerMonthlyCost\"\r\n        inputValue={form.sewerMonthlyCost}\r\n        handleOnChange={handleOnChange}\r\n        setFormValueByName={setFormValueByName}\r\n      />\r\n      <MonthYearInput\r\n        label=\"Gas\"\r\n        inputName=\"gasMonthlyCost\"\r\n        inputValue={form.gasMonthlyCost}\r\n        handleOnChange={handleOnChange}\r\n        setFormValueByName={setFormValueByName}\r\n      />\r\n      <MonthYearInput\r\n        label=\"Garbage\"\r\n        inputName=\"garbageMonthlyCost\"\r\n        inputValue={form.garbageMonthlyCost}\r\n        handleOnChange={handleOnChange}\r\n        setFormValueByName={setFormValueByName}\r\n      />\r\n      <MonthYearInput\r\n        label=\"HOA\"\r\n        inputName=\"hoaMonthlyCost\"\r\n        inputValue={form.hoaMonthlyCost}\r\n        handleOnChange={handleOnChange}\r\n        setFormValueByName={setFormValueByName}\r\n      />\r\n      <MonthYearPercentInput\r\n        label=\"Property Management\"\r\n        inputName=\"propertyManagementRate\"\r\n        percentageValue={form.propertyManagementRate}\r\n        wholeMonthlyValue={form.rent}\r\n        handleOnChange={handleOnChange}\r\n        setFormValueByName={setFormValueByName}\r\n        monthAppendValue=\"/mo.\"\r\n      />\r\n\r\n      <SingleInput\r\n        label=\"Total Expenses\"\r\n        inputValue={calculateTotalExpenses(form)}\r\n        disabled={true}\r\n        prefix=\"$\"\r\n        suffix=\"/mo.\"\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default TotalExpenses;\r\n","import React from \"react\";\r\nimport SingleInput from \"./SingleInput\";\r\nimport { FormData } from \"./App\";\r\nimport {\r\n  calculateMonthlyCashFlow,\r\n  calculateROIWithoutMortgage,\r\n  calculateROI,\r\n} from \"./helpers\";\r\n\r\ninterface Props {\r\n  form: FormData;\r\n}\r\n\r\nconst Evaluation = ({ form }: Props) => {\r\n  return (\r\n    <div>\r\n      <h2>6) Evaluation</h2>\r\n      <SingleInput\r\n        label=\"Cashflow\"\r\n        inputValue={calculateMonthlyCashFlow(form)}\r\n        prefix=\"$\"\r\n        suffix=\"/mo.\"\r\n        disabled={true}\r\n      />\r\n      <SingleInput\r\n        label=\"ROI (without mortgage)\"\r\n        inputValue={calculateROIWithoutMortgage(form)}\r\n        suffix=\"%\"\r\n        disabled={true}\r\n      />\r\n      <SingleInput\r\n        label=\"ROI\"\r\n        inputValue={calculateROI(form)}\r\n        suffix=\"%\"\r\n        disabled={true}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Evaluation;\r\n","import React from \"react\";\r\nimport SingleInput from \"./SingleInput\";\r\nimport { FormData } from \"./App\";\r\nimport {\r\n  calculateProjectionSalePrice,\r\n  calculateProjectionSaleExpenses,\r\n  calculateProjectionLoanPayoff,\r\n  calculateProjectionTotalInvestedCapital,\r\n  calculateProjectionSaleProfit,\r\n  calculateProjectionTotalCashflow,\r\n  calculateProjectionTotalProfit,\r\n  calculateProjectionROI,\r\n} from \"./helpers\";\r\n\r\ninterface Props {\r\n  form: FormData;\r\n  handleOnChange: (event: React.ChangeEvent<HTMLInputElement>) => void;\r\n}\r\n\r\nconst Projection = ({ form, handleOnChange }: Props) => {\r\n  const { projectionYear, afterRepairValue, appreciation } = form;\r\n\r\n  return (\r\n    <div>\r\n      <h2>7) Projection</h2>\r\n\r\n      <SingleInput\r\n        label=\"Year\"\r\n        inputValue={projectionYear}\r\n        inputName=\"projectionYear\"\r\n        handleOnChange={handleOnChange}\r\n        suffix=\"yr.\"\r\n      />\r\n\r\n      <SingleInput\r\n        label=\"After Repair Value (ARV)\"\r\n        inputValue={afterRepairValue}\r\n        inputName=\"afterRepairValue\"\r\n        handleOnChange={handleOnChange}\r\n        prefix=\"$\"\r\n        required={true}\r\n      />\r\n\r\n      <SingleInput\r\n        label=\"Appreciation\"\r\n        inputValue={appreciation}\r\n        inputName=\"appreciation\"\r\n        handleOnChange={handleOnChange}\r\n        suffix=\"%\"\r\n        roundValue={false}\r\n        additionalInfoText=\"(National Average: 4.4%)\"\r\n        isNumberInput={true}\r\n      />\r\n\r\n      <SingleInput\r\n        label=\"Sale Price\"\r\n        inputValue={calculateProjectionSalePrice(form)}\r\n        prefix=\"$\"\r\n        disabled={true}\r\n      />\r\n\r\n      <SingleInput\r\n        label=\"Sale Expenses\"\r\n        inputValue={calculateProjectionSaleExpenses(form)}\r\n        prefix=\"$\"\r\n        disabled={true}\r\n      />\r\n\r\n      <SingleInput\r\n        label=\"Loan Payoff\"\r\n        inputValue={calculateProjectionLoanPayoff(form)}\r\n        prefix=\"$\"\r\n        disabled={true}\r\n      />\r\n\r\n      <SingleInput\r\n        label=\"Total Invested Capital\"\r\n        inputValue={calculateProjectionTotalInvestedCapital(form)}\r\n        prefix=\"$\"\r\n        disabled={true}\r\n      />\r\n\r\n      <SingleInput\r\n        label=\"Profit\"\r\n        inputValue={calculateProjectionSaleProfit(form)}\r\n        prefix=\"$\"\r\n        disabled={true}\r\n      />\r\n\r\n      <SingleInput\r\n        label=\"Total cashflow\"\r\n        inputValue={calculateProjectionTotalCashflow(form)}\r\n        prefix=\"$\"\r\n        disabled={true}\r\n      />\r\n\r\n      <SingleInput\r\n        label=\"Total Profit (with cashflow)\"\r\n        inputValue={calculateProjectionTotalProfit(form)}\r\n        prefix=\"$\"\r\n        disabled={true}\r\n      />\r\n\r\n      <SingleInput\r\n        label=\"ROI\"\r\n        inputValue={calculateProjectionROI(form)}\r\n        suffix=\"%\"\r\n        disabled={true}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Projection;\r\n","import React from \"react\";\r\nimport {\r\n  AreaChart,\r\n  CartesianGrid,\r\n  XAxis,\r\n  YAxis,\r\n  Tooltip,\r\n  Area,\r\n  Legend,\r\n} from \"recharts\";\r\nimport { FormData } from \"./App\";\r\nimport {\r\n  calculateProjectionSalePrice,\r\n  calculateProjectionLoanPayoff,\r\n} from \"./helpers\";\r\n\r\ninterface Props {\r\n  form: FormData;\r\n}\r\n\r\ninterface GraphPoint {\r\n  name: string;\r\n  equity: number;\r\n  loanPayoff: number;\r\n  propertyValue: number;\r\n}\r\n\r\nconst LoanBalanceValueEquity = ({ form }: Props) => {\r\n  const getGraphPoints = (numberOfYear: number): GraphPoint[] => {\r\n    const points: GraphPoint[] = [];\r\n    for (let i = 0; i <= numberOfYear; i = i + 1) {\r\n      const loanPayoff = Math.floor(\r\n        calculateProjectionLoanPayoff({\r\n          ...form,\r\n          projectionYear: i,\r\n        })\r\n      );\r\n      const propertyValue = Math.floor(\r\n        calculateProjectionSalePrice({\r\n          ...form,\r\n          projectionYear: i,\r\n        })\r\n      );\r\n      points.push({\r\n        name: `Year ${i}`,\r\n        equity: propertyValue - loanPayoff,\r\n        loanPayoff: loanPayoff,\r\n        propertyValue: propertyValue,\r\n      });\r\n    }\r\n\r\n    return points;\r\n  };\r\n\r\n  const data = getGraphPoints(30);\r\n\r\n  const opacity = 0.3;\r\n\r\n  return (\r\n    <div>\r\n      <AreaChart\r\n        width={600}\r\n        height={400}\r\n        data={data}\r\n        margin={{ top: 10, right: 30, left: 0, bottom: 0 }}\r\n      >\r\n        <CartesianGrid strokeDasharray=\"3 3\" />\r\n        <XAxis dataKey=\"name\" />\r\n        <YAxis />\r\n        <Tooltip />\r\n        <Legend verticalAlign=\"top\" align=\"center\" />\r\n        <Area\r\n          type=\"monotone\"\r\n          dataKey=\"propertyValue\"\r\n          stroke=\"#ffc658\"\r\n          fill=\"#ffc658\"\r\n          fillOpacity={opacity}\r\n        />\r\n        <Area\r\n          type=\"monotone\"\r\n          dataKey=\"equity\"\r\n          stroke=\"#8884d8\"\r\n          fill=\"#8884d8\"\r\n          fillOpacity={opacity}\r\n        />\r\n        <Area\r\n          type=\"monotone\"\r\n          dataKey=\"loanPayoff\"\r\n          stroke=\"#82ca9d\"\r\n          fill=\"#82ca9d\"\r\n          fillOpacity={opacity}\r\n        />\r\n      </AreaChart>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default LoanBalanceValueEquity;\r\n","import React, { useState } from \"react\";\nimport \"./App.css\";\nimport { Button } from \"react-bootstrap\";\nimport TotalProjectCost from \"./TotalProjectCost\";\nimport { useLocalStorage } from \"./helpers\";\nimport PropertyInfo from \"./PropertyInfo\";\nimport DefaultValues from \"./DefaultValues\";\nimport TotalCostOutOfPocket from \"./TotalCostOutOfPocket\";\nimport MonthlyMortgagePayment from \"./MonthlyMortgagePayment\";\nimport TotalIncome from \"./TotalIncome\";\nimport TotalExpenses from \"./TotalExpenses\";\nimport Evaluation from \"./Evaluation\";\nimport Projection from \"./Projection\";\nimport LoanBalanceValueEquity from \"./LoanBalanceValueEquity\";\n\nexport interface FormData {\n  address: string;\n  purchasePrice: number;\n  purchaseClosingCosts: number;\n  loanPeriod: number;\n  interestRate: number;\n  downPaymentPercentage: number;\n  vacancyRate: number;\n  repairsRate: number;\n  capitalExpendituresRate: number;\n  insuranceRate: number;\n  taxRate: number;\n  propertyManagementRate: number;\n  projectionYear: number;\n  appreciation: number;\n  preRentHoldingCosts: number;\n  estimatedRepairs: number;\n  askingPrice: number;\n  rent: number;\n  floodInsuranceMonthlyCost: number;\n  electricityMonthlyCost: number;\n  waterMonthlyCost: number;\n  sewerMonthlyCost: number;\n  gasMonthlyCost: number;\n  garbageMonthlyCost: number;\n  hoaMonthlyCost: number;\n  afterRepairValue: number;\n}\n\nconst App = () => {\n  const initialDefaults = {\n    address: \"\",\n    purchaseClosingCosts: 5000,\n    loanPeriod: 30,\n    interestRate: 5,\n    downPaymentPercentage: 20,\n    vacancyRate: 5,\n    repairsRate: 5,\n    capitalExpendituresRate: 12.5,\n    insuranceRate: 0.5,\n    taxRate: 1.06,\n    propertyManagementRate: 11,\n    projectionYear: 5,\n    appreciation: 4.4,\n  };\n\n  const [defaults, setDefaults] = useLocalStorage(\"defaults\", initialDefaults);\n  const [savedForm, setSavedForm] = useLocalStorage(\"form\", initialDefaults);\n\n  const [form, setForm] = React.useState(savedForm || initialDefaults);\n  const handleOnChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    const trimmedValue = event.target.value.replace(/,/g, \"\");\n    if (!isNaN(Number(trimmedValue))) {\n      const newForm = {\n        ...form,\n        [event.target.name]: Number(trimmedValue),\n      };\n      setForm(newForm);\n\n      setSavedForm(newForm);\n    }\n  };\n\n  const handleTextOnChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    const newForm = {\n      ...form,\n      [event.target.name]: event.target.value,\n    };\n    setForm(newForm);\n\n    setSavedForm(newForm);\n  };\n\n  const handleDefaultsSubmission = (newDefaults: FormData) => {\n    const newDefaultsString = newDefaults;\n\n    setDefaults(newDefaultsString);\n    const newForm = { ...form, ...newDefaults };\n    setForm(newForm);\n    setSavedForm(newForm);\n  };\n\n  const setFormValueByName = (name: string, value: number) => {\n    const newForm = {\n      ...form,\n      [name]: Number(value),\n    };\n    setForm(newForm);\n\n    setSavedForm(newForm);\n  };\n\n  const handleResetNumbersButtonClick = () => {\n    setSavedForm(initialDefaults);\n    setForm(initialDefaults);\n  };\n\n  return (\n    <div className=\"App\">\n      <div className=\"container\">\n        <h1 className=\"text-center\">RE Calculator</h1>\n\n        <hr className=\"solid\" />\n        <DefaultValues\n          defaults={defaults}\n          handleOnSubmit={handleDefaultsSubmission}\n        />\n        <div>\n          <Button\n            variant=\"primary\"\n            onClick={handleResetNumbersButtonClick}\n            className=\"float-right clear-fix\"\n            style={{ marginRight: \"10px\" }}\n          >\n            Reset Numbers\n          </Button>\n          <br />\n        </div>\n        <form>\n          <PropertyInfo\n            form={form}\n            handleOnChange={handleOnChange}\n            handleTextOnChange={handleTextOnChange}\n          />\n          <TotalProjectCost form={form} handleOnChange={handleOnChange} />\n          <TotalCostOutOfPocket\n            form={form}\n            handleOnChange={handleOnChange}\n            setFormValueByName={setFormValueByName}\n          />\n          <MonthlyMortgagePayment form={form} handleOnChange={handleOnChange} />\n          <TotalIncome form={form} handleOnChange={handleOnChange} />\n          <TotalExpenses\n            form={form}\n            handleOnChange={handleOnChange}\n            setFormValueByName={setFormValueByName}\n          />\n          <Evaluation form={form} />\n          <Projection form={form} handleOnChange={handleOnChange} />\n          <LoanBalanceValueEquity form={form} />\n        </form>\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}