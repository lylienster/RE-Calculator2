{"version":3,"sources":["pages/Partials/LoanBalanceValueEquity.tsx","pages/Partials/ReportSummary.tsx","pages/Partials/AnalysisOverTime.tsx","pages/Partials/calculateAnalysisOverTime.ts","pages/Partials/Report.tsx"],"names":["LoanBalanceValueEquity","data","dataPoints","numberOfYear","points","i","loanPayoff","Math","floor","calculateProjectedLoanBalance","propertyValue","calculateProjectedPropertyValue","push","calculateProjectedEquity","getGraphPoints","incomeExpenseCashflowDataPoints","income","calculateProjectedTotalAnnualIncome","expense","calculateProjectedTotalAnnualExpenses","cashflow","getIncomeExpenseCashflowDataPoints","displayChart","title","min","slice","map","x","Number","height","chartType","loader","options","hAxis","titleTextStyle","color","vAxis","minValue","viewWindow","legend","position","maxLines","rootProps","style","marginTop","Row","Col","md","useMemo","ReportSummary","pairs","address","city","state","zip","salesDescription","hasFullAddress","useState","key","setKey","createKeyValuePair","value","isPercent","toCurrency","formatDataPointValue","number","toFixed","formatDataPointLabel","label","createDataPoint","summary","purchaseClosingCost","estimateRepairCost","calculateTotalProjectCost","afterRepairPrice","calculateDownPayment","calculateLoan","loanPeriod","loanInterestRate","calculateMonthlyMortgagePayment","calculateOutOfPocket","fiftyPercentRule","calculateMonthlyTotalIncome","displayKeyValuePairs2","xs","className","getExpenseTabKeyValuePairs","calculateTotalMonthyOperatingExpenses","getIncomeTabKeyValuePairs","purchasePrice","calculateMonthlyTotalExpenses","calculateProjectedTotalAnnualCashflow","calculateProFormaCap","calculateNetOperatingIncome","calculateProjectedCashOnCashROI","calculatePurchaseCapRate","displayKeyValuePairs","Tabs","id","activeKey","onSelect","k","variant","Tab","eventKey","calculateMonthlyVacancyCost","calculateMonthlyManagementCost","calculateMonthlyRepairsCost","calculateMonthlyCapitalExpendituresCost","monthlyInsurance","calculateMonthlyTaxCost","monthlyHoaCost","otherMonthlyExpenses","monthlyElectricyCost","monthlyWaterAndSewerCost","monthlyGarbageCost","monthlyPmiCost","monthlyRent","otherMonthlyIncome","AnalysisOverTime","projectedNumbersByYear","year","projectedYear","projectionYear","totalIncome","totalExpenses","operatingExpenses","calculateProjectedAnnualOperatingExpenses","mortgagePayment","totalCashflow","cashOnCashROI","equity","loanBalance","totalProfitIfSold","calculateProjectedTotalProfitIfSold","annualizedTotalReturn","calculateProjectedAnnualizedTotalReturn","calculateAnalysisOverTime","annualExpensesGrowth","annualIncomeGrowth","annualPropertyValueGrowth","Table","bordered","size","hover","numbers","paddingLeft","Report"],"mappings":"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","file":"static/js/3.18fd54d2.chunk.js","sourcesContent":["import React, { useMemo } from \"react\";\r\nimport { Data } from \"../BuyAndHoldCalculator\";\r\nimport \"./Results.css\";\r\nimport Chart from \"react-google-charts\";\r\nimport {\r\n  calculateProjectedPropertyValue,\r\n  calculateProjectedLoanBalance,\r\n  calculateProjectedEquity,\r\n  calculateProjectedTotalAnnualIncome,\r\n  calculateProjectedTotalAnnualExpenses,\r\n} from \"../../helpers\";\r\nimport { Row, Col } from \"react-bootstrap\";\r\n\r\ninterface Props {\r\n  data: Data;\r\n}\r\n\r\ninterface ProjectedData {\r\n  totalIncome: string;\r\n  totalExpenses: string;\r\n  operatingExpenses: string;\r\n  propertyValue: string;\r\n  mortgagePayment: string;\r\n  totalCashflow: string;\r\n  cashOnCashROI: string;\r\n  loanBalance: string;\r\n  equity: string;\r\n  projectionYear: number;\r\n  totalProfitIfSold: string;\r\n  annualizedTotalReturn: string;\r\n}\r\n\r\ninterface GraphPoint {\r\n  name: string;\r\n  equity: number;\r\n  loanPayoff: number;\r\n  propertyValue: number;\r\n}\r\n\r\nconst LoanBalanceValueEquity = ({ data }: Props) => {\r\n  const getGraphPoints = (\r\n    numberOfYear: number\r\n  ): (string[] | [string, number, number, number])[] => {\r\n    let points: (string[] | [string, number, number, number])[] = [\r\n      [\"Year\", \"Equity\", \"Loan Balance\", \"Property Value\"],\r\n    ];\r\n\r\n    for (let i = 0; i <= numberOfYear; i = i + 1) {\r\n      const loanPayoff = Math.floor(calculateProjectedLoanBalance(data, i));\r\n      const propertyValue = Math.floor(\r\n        calculateProjectedPropertyValue(data, i)\r\n      );\r\n      points.push([\r\n        `Year ${i}`,\r\n        calculateProjectedEquity(data, i),\r\n        loanPayoff,\r\n        propertyValue,\r\n      ]);\r\n    }\r\n\r\n    return points;\r\n  };\r\n\r\n  const getIncomeExpenseCashflowDataPoints = (\r\n    numberOfYear: number\r\n  ): (string[] | [string, number, number, number])[] => {\r\n    let points: (string[] | [string, number, number, number])[] = [\r\n      [\"Year\", \"Income\", \"Expense\", \"Cashflow\"],\r\n    ];\r\n\r\n    for (let i = 1; i <= numberOfYear; i = i + 1) {\r\n      const income = calculateProjectedTotalAnnualIncome(data, i - 1);\r\n      const expense = calculateProjectedTotalAnnualExpenses(data, i - 1);\r\n      const cashflow = income - expense;\r\n      points.push([\r\n        `Year ${i}`,\r\n        Math.floor(income),\r\n        Math.floor(expense),\r\n        Math.floor(cashflow),\r\n      ]);\r\n    }\r\n\r\n    return points;\r\n  };\r\n\r\n  const dataPoints = getGraphPoints(30);\r\n  const incomeExpenseCashflowDataPoints = getIncomeExpenseCashflowDataPoints(\r\n    30\r\n  );\r\n  const displayChart = (\r\n    dataPoints: (string[] | [string, number, number, number])[],\r\n    title: string\r\n  ) => {\r\n    const min = Math.min(\r\n      ...dataPoints\r\n        .slice(1)\r\n        .map((x) => Math.min(Number(x[1]), Number(x[2]), Number(x[3]))),\r\n      0\r\n    );\r\n    return (\r\n      <Chart\r\n        // width={\"800px\"}\r\n        height={\"300px\"}\r\n        chartType=\"AreaChart\"\r\n        loader={<div>Loading Chart</div>}\r\n        data={dataPoints}\r\n        options={{\r\n          title: title,\r\n          hAxis: { title: \"Year\", titleTextStyle: { color: \"#333\" } },\r\n          vAxis: {\r\n            minValue: min,\r\n            viewWindow: {\r\n              min: min,\r\n            },\r\n          },\r\n          legend: { position: \"top\", maxLines: 3 },\r\n          // For the legend to fit, we make the chart area smaller\r\n          //   chartArea: { width: \"50%\", height: \"70%\" },\r\n          // lineWidth: 25\r\n        }}\r\n        // For tests\r\n        rootProps={{ \"data-testid\": \"1\" }}\r\n      />\r\n    );\r\n  };\r\n  return (\r\n    <div style={{ marginTop: \"30px\" }}>\r\n      <Row>\r\n        <Col md={6}>\r\n          {useMemo(\r\n            () =>\r\n              displayChart(\r\n                incomeExpenseCashflowDataPoints,\r\n                \"Income, Expense and Cashflow\"\r\n              ),\r\n            [incomeExpenseCashflowDataPoints]\r\n          )}\r\n        </Col>\r\n        <Col md={6}>\r\n          {displayChart(dataPoints, \"Loan Balance, Value and Equity\")}\r\n        </Col>\r\n      </Row>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default LoanBalanceValueEquity;\r\n","import React, { useState } from \"react\";\r\nimport { Data } from \"../BuyAndHoldCalculator\";\r\nimport { Row, Col, Tabs, Tab } from \"react-bootstrap\";\r\nimport Chart from \"react-google-charts\";\r\n\r\nimport {\r\n  calculateTotalProjectCost,\r\n  toCurrency,\r\n  calculateDownPayment,\r\n  calculateLoan,\r\n  calculateMonthlyMortgagePayment,\r\n  calculateOutOfPocket,\r\n  calculateMonthlyVacancyCost,\r\n  calculateMonthlyManagementCost,\r\n  calculateMonthlyRepairsCost,\r\n  calculateMonthlyCapitalExpendituresCost,\r\n  calculateMonthlyTaxCost,\r\n  calculateTotalMonthyOperatingExpenses,\r\n  calculateMonthlyTotalIncome,\r\n  calculateMonthlyTotalExpenses,\r\n  calculateProjectedTotalAnnualCashflow,\r\n  calculateProjectedCashOnCashROI,\r\n  calculateNetOperatingIncome,\r\n  calculatePurchaseCapRate,\r\n  calculateProFormaCap,\r\n} from \"../../helpers\";\r\n\r\ninterface Props {\r\n  data: Data;\r\n}\r\n\r\ninterface KeyValuePair {\r\n  key: string;\r\n  value: string;\r\n}\r\n\r\nconst ReportSummary = ({ data }: Props) => {\r\n  const {\r\n    address = \"\",\r\n    city = \"\",\r\n    state = \"\",\r\n    zip = \"\",\r\n    salesDescription,\r\n  } = data;\r\n  const hasFullAddress = address && city && state && zip;\r\n  const [key, setKey] = useState(\"expenses\");\r\n\r\n  const createKeyValuePair = (\r\n    key: string,\r\n    value: number,\r\n    isPercent?: boolean\r\n  ): KeyValuePair => {\r\n    if (isPercent) {\r\n      return {\r\n        key: key,\r\n        value: `${toCurrency(value)}%`,\r\n      };\r\n    }\r\n    return {\r\n      key: key,\r\n      value: `$${toCurrency(value)}`,\r\n    };\r\n  };\r\n\r\n  const formatDataPointValue = (number: number): number => {\r\n    return Number((number || 0).toFixed(2));\r\n  };\r\n  const formatDataPointLabel = (label: string, value: number): string => {\r\n    return `${label}: $${formatDataPointValue(value)}`;\r\n  };\r\n\r\n  const createDataPoint = (label: string, value: number): [string, number] => {\r\n    return [formatDataPointLabel(label, value), formatDataPointValue(value)];\r\n  };\r\n\r\n  const summary = [\r\n    createKeyValuePair(\"Purchase Closing Costs\", data.purchaseClosingCost),\r\n    createKeyValuePair(\"Estimated Repairs\", data.estimateRepairCost),\r\n    createKeyValuePair(\"Total Project Cost\", calculateTotalProjectCost(data)),\r\n    createKeyValuePair(\"After Repair Value\", data.afterRepairPrice),\r\n    createKeyValuePair(\"Down Payment\", calculateDownPayment(data)),\r\n    createKeyValuePair(\"Loan Amount\", calculateLoan(data)),\r\n    {\r\n      key: \"Amortized Over\",\r\n      value: `${data.loanPeriod} years`,\r\n    },\r\n    createKeyValuePair(\"Loan Interest Rate\", data.loanInterestRate, true),\r\n    createKeyValuePair(\"Monthly P&I\", calculateMonthlyMortgagePayment(data)),\r\n    createKeyValuePair(\"Total Cash Needed\", calculateOutOfPocket(data)),\r\n  ] as KeyValuePair[];\r\n\r\n  const getExpenseDataPoints = () => {\r\n    return [\r\n      [\"Expense\", \"Cost\"],\r\n      createDataPoint(\"Mortgage\", calculateMonthlyMortgagePayment(data)),\r\n      createDataPoint(\"Vacancy\", calculateMonthlyVacancyCost(data)),\r\n      createDataPoint(\"Management\", calculateMonthlyManagementCost(data)),\r\n      createDataPoint(\"Repairs\", calculateMonthlyRepairsCost(data)),\r\n      createDataPoint(\"CapEx\", calculateMonthlyCapitalExpendituresCost(data)),\r\n      createDataPoint(\"Insurance\", data.monthlyInsurance),\r\n      createDataPoint(\"Tax\", calculateMonthlyTaxCost(data)),\r\n      createDataPoint(\"HOA\", data.monthlyHoaCost),\r\n      createDataPoint(\"Other Expenses\", data.otherMonthlyExpenses),\r\n      createDataPoint(\"Electricity\", data.monthlyElectricyCost),\r\n      createDataPoint(\"Water & Sewer\", data.monthlyWaterAndSewerCost),\r\n      createDataPoint(\"Garbage\", data.monthlyGarbageCost),\r\n      createDataPoint(\"PMI\", data.monthlyPmiCost),\r\n    ];\r\n  };\r\n\r\n  const getIncomeDataPoints = () => {\r\n    return [\r\n      [\"Income\", \"Value\"],\r\n      createDataPoint(\"Rent\", data.monthlyRent),\r\n      createDataPoint(\"Other\", data.otherMonthlyIncome),\r\n    ];\r\n  };\r\n\r\n  const fiftyPercentRule = [\r\n    createKeyValuePair(\r\n      \"Total Monthly Income\",\r\n      calculateMonthlyTotalIncome(data)\r\n    ),\r\n    createKeyValuePair(\r\n      \"x50% for Expenses\",\r\n      calculateMonthlyTotalIncome(data) / 2\r\n    ),\r\n    createKeyValuePair(\r\n      \"Mortgage Payment\",\r\n      calculateMonthlyMortgagePayment(data)\r\n    ),\r\n    createKeyValuePair(\r\n      \"Monthly Cashflow using 50% Rule\",\r\n      calculateMonthlyTotalIncome(data) / 2 -\r\n        calculateMonthlyMortgagePayment(data)\r\n    ),\r\n  ];\r\n\r\n  const displayKeyValuePairs = (pairs: KeyValuePair[]) => {\r\n    return pairs.map((x) => (\r\n      <Row>\r\n        <Col xs={8}>{x.key}</Col>\r\n        <Col xs={4} className=\"font-weight-bold text-right\">\r\n          {x.value}\r\n        </Col>\r\n      </Row>\r\n    ));\r\n  };\r\n\r\n  const displayKeyValuePairs2 = (fiftyPercentRule: KeyValuePair[]) => {\r\n    return fiftyPercentRule.map((x) => (\r\n      <Row>\r\n        <Col md={5}></Col>\r\n        <Col md={7}>\r\n          <Row>\r\n            <Col xs={8}>{x.key}</Col>\r\n            <Col xs={4} className=\"font-weight-bold text-right\">\r\n              {x.value}\r\n            </Col>\r\n          </Row>\r\n        </Col>\r\n      </Row>\r\n    ));\r\n  };\r\n\r\n  const displayKeyValuePairs3 = (pairs: KeyValuePair[]) => {\r\n    return (\r\n      <Row>\r\n        {pairs.map((x) => (\r\n          <Col md={3} className=\"pl-md-0\">\r\n            <Row className=\"py-md-2\">\r\n              <Col md={12} xs={8}>\r\n                {x.key}\r\n              </Col>\r\n              <Col md={12} xs={4} className=\"font-weight-bold \">\r\n                <span className=\"d-none d-sm-block\">{x.value}</span>\r\n                <span className=\"text-right d-block d-sm-none\">{x.value}</span>\r\n              </Col>\r\n            </Row>\r\n          </Col>\r\n        ))}\r\n      </Row>\r\n    );\r\n  };\r\n\r\n  const getExpenseTabKeyValuePairs = [\r\n    createKeyValuePair(\r\n      \"Total Operating Expeneses\",\r\n      calculateTotalMonthyOperatingExpenses(data)\r\n    ),\r\n    createKeyValuePair(\r\n      \"Mortgage Expeneses\",\r\n      calculateMonthlyMortgagePayment(data)\r\n    ),\r\n  ] as KeyValuePair[];\r\n\r\n  const getIncomeTabKeyValuePairs = [\r\n    createKeyValuePair(\"Monthly Income\", calculateMonthlyTotalIncome(data)),\r\n  ] as KeyValuePair[];\r\n\r\n  return (\r\n    <div style={{ marginTop: \"30px\" }}>\r\n      <h2>{hasFullAddress && `${address} ${city} ${state}, ${zip}`}</h2>\r\n      <Row>\r\n        <Col>\r\n          <p>{salesDescription}</p>\r\n        </Col>\r\n      </Row>\r\n      <Row className=\"py-3\">\r\n        <Col md={4}>\r\n          <Row>\r\n            <Col md={12} xs={8}>\r\n              Purchase Price\r\n            </Col>\r\n            <Col md={12} xs={4} className=\"font-weight-bold\">\r\n              <span className=\"d-none d-sm-block\">\r\n                {`$${toCurrency(data.purchasePrice)}`}\r\n              </span>\r\n              <span className=\"text-right d-block d-sm-none\">\r\n                {`$${toCurrency(data.purchasePrice)}`}\r\n              </span>\r\n            </Col>\r\n          </Row>\r\n        </Col>\r\n        <Col md={8}>\r\n          {displayKeyValuePairs3([\r\n            createKeyValuePair(\r\n              \"Monthly Income\",\r\n              calculateMonthlyTotalIncome(data)\r\n            ),\r\n            createKeyValuePair(\r\n              \"Monthly Expenses\",\r\n              calculateMonthlyTotalExpenses(data)\r\n            ),\r\n            createKeyValuePair(\r\n              \"Monthly Cashflow\",\r\n              calculateProjectedTotalAnnualCashflow(data) / 12\r\n            ),\r\n            createKeyValuePair(\r\n              \"Pro Forma Cap\",\r\n              calculateProFormaCap(data),\r\n              true\r\n            ),\r\n            createKeyValuePair(\r\n              \"Net Operating Income\",\r\n              calculateNetOperatingIncome(data)\r\n            ),\r\n            createKeyValuePair(\"Total Cash Needed\", calculateOutOfPocket(data)),\r\n            createKeyValuePair(\r\n              \"Cash on Cash ROI\",\r\n              calculateProjectedCashOnCashROI(data),\r\n              true\r\n            ),\r\n            createKeyValuePair(\r\n              \"Purchase Cap Rate\",\r\n              calculatePurchaseCapRate(data),\r\n              true\r\n            ),\r\n          ])}\r\n        </Col>\r\n      </Row>\r\n      <Row>\r\n        <Col md={4}>{displayKeyValuePairs(summary)}</Col>\r\n        <Col md={8}>\r\n          <Tabs\r\n            id=\"pie-charts\"\r\n            activeKey={key}\r\n            onSelect={(k: string) => setKey(k)}\r\n            variant=\"pills\"\r\n            className=\"justify-content-center py-3\"\r\n          >\r\n            <Tab eventKey=\"expenses\" title=\"Expenses\">\r\n              {displayKeyValuePairs2(getExpenseTabKeyValuePairs)}\r\n              <div className=\"justify-content-center\">\r\n                <Chart\r\n                  // width={\"500px\"}\r\n                  height={\"300px\"}\r\n                  chartType=\"PieChart\"\r\n                  loader={<div>Loading Chart</div>}\r\n                  data={getExpenseDataPoints()}\r\n                  options={{}}\r\n                  rootProps={{ \"expense-chart\": \"1\" }}\r\n                />\r\n              </div>\r\n            </Tab>\r\n            <Tab eventKey=\"income\" title=\"Income\">\r\n              <div className=\"pt-3\">\r\n                {displayKeyValuePairs2(getIncomeTabKeyValuePairs)}\r\n                <div className=\"justify-content-center\">\r\n                  <Chart\r\n                    // width={\"500px\"}\r\n                    height={\"300px\"}\r\n                    chartType=\"PieChart\"\r\n                    loader={<div>Loading Chart</div>}\r\n                    data={getIncomeDataPoints()}\r\n                    options={{}}\r\n                    rootProps={{ \"income-chart\": \"1\" }}\r\n                  />\r\n                </div>\r\n              </div>\r\n            </Tab>\r\n            <Tab eventKey=\"50percentRule\" title=\"50 % Rule\">\r\n              <div className=\"pt-3\">\r\n                {displayKeyValuePairs2(fiftyPercentRule)}\r\n              </div>\r\n            </Tab>\r\n          </Tabs>\r\n        </Col>\r\n      </Row>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ReportSummary;\r\n","import React from \"react\";\r\nimport { Table } from \"react-bootstrap\";\r\nimport { Data } from \"../BuyAndHoldCalculator\";\r\nimport \"./Results.css\";\r\nimport { calculateAnalysisOverTime } from \"./calculateAnalysisOverTime\";\r\n\r\ninterface Props {\r\n  data: Data;\r\n}\r\n\r\nexport interface ProjectedData {\r\n  projectionYear: number;\r\n  totalIncome: string;\r\n  totalExpenses: string;\r\n  operatingExpenses: string;\r\n  propertyValue: string;\r\n  mortgagePayment: string;\r\n  totalCashflow: string;\r\n  cashOnCashROI: string;\r\n  loanBalance: string;\r\n  equity: string;\r\n  totalProfitIfSold: string;\r\n  annualizedTotalReturn: string;\r\n}\r\n\r\n// interface ProjectedData2 {\r\n//   projectionYear: number[];\r\n//   totalIncome: string[];\r\n//   totalExpenses: string[];\r\n//   operatingExpenses: string[];\r\n//   propertyValue: string[];\r\n//   mortgagePayment: string[];\r\n//   totalCashflow: string[];\r\n//   cashOnCashROI: string[];\r\n//   loanBalance: string[];\r\n//   equity: string[];\r\n//   totalProfitIfSold: string[];\r\n//   annualizedTotalReturn: string[];\r\n// }\r\n\r\nconst AnalysisOverTime = ({ data }: Props) => {\r\n  const projectedNumbersByYear = calculateAnalysisOverTime(data);\r\n\r\n  // const test = {\r\n  //   projectionYear: [1, 2, 3],\r\n  //   totalIncome: [\"1\", \"2\", \"3\"],\r\n  // } as ProjectedData2;\r\n\r\n  return (\r\n    <div style={{ marginTop: \"30px\" }}>\r\n      <h2>Analysis Over Time</h2>\r\n      <div>{`Expense Increase: ${data.annualExpensesGrowth || 0}%/year`}</div>\r\n      <div>{`Income Increase: ${data.annualIncomeGrowth || 0}%/year`}</div>\r\n      <div>{`Property Value Increase: ${\r\n        data.annualPropertyValueGrowth || 0\r\n      }%/year`}</div>\r\n      <Table bordered size=\"sm\" hover>\r\n        <thead>\r\n          <tr>\r\n            <th></th>\r\n            {projectedNumbersByYear.map((numbers) => {\r\n              return <th>{`Year ${numbers.projectionYear}`}</th>;\r\n            })}\r\n          </tr>\r\n        </thead>\r\n        <tbody>\r\n          {/* <tr>\r\n            <td>Total Annual Income</td>\r\n            {test.projectionYear.map((temp) => {\r\n              return <td>{temp}</td>;\r\n            })}\r\n          </tr>\r\n          <tr>\r\n            <td>Total Annual Income</td>\r\n            {test.totalIncome.map((temp) => {\r\n              return <td>{temp}</td>;\r\n            })}\r\n          </tr> */}\r\n\r\n          <tr>\r\n            <td>Total Annual Income</td>\r\n            {projectedNumbersByYear.map((numbers) => {\r\n              return <td>{numbers.totalIncome}</td>;\r\n            })}\r\n          </tr>\r\n          <tr className=\"striped\">\r\n            <td>Total Annual Expenses</td>\r\n            {projectedNumbersByYear.map((numbers) => {\r\n              return <td>{numbers.totalExpenses}</td>;\r\n            })}\r\n          </tr>\r\n          <tr className=\"striped\">\r\n            <td style={{ paddingLeft: \"2rem\" }}>Operating Expenses</td>\r\n            {projectedNumbersByYear.map((numbers) => {\r\n              return <td>{numbers.operatingExpenses}</td>;\r\n            })}\r\n          </tr>\r\n          <tr className=\"striped\">\r\n            <td style={{ paddingLeft: \"2rem\" }}>Mortgage Payment</td>\r\n            {projectedNumbersByYear.map((numbers) => {\r\n              return <td>{numbers.mortgagePayment}</td>;\r\n            })}\r\n          </tr>\r\n          <tr>\r\n            <td>Total Annual Cashflow</td>\r\n            {projectedNumbersByYear.map((numbers) => {\r\n              return <td>{numbers.totalCashflow}</td>;\r\n            })}\r\n          </tr>\r\n          <tr className=\"striped\">\r\n            <td>Cash on Cash ROI</td>\r\n            {projectedNumbersByYear.map((numbers) => {\r\n              return <td>{numbers.cashOnCashROI}</td>;\r\n            })}\r\n          </tr>\r\n          <tr>\r\n            <td>Property Value</td>\r\n            {projectedNumbersByYear.map((numbers) => {\r\n              return <td>{numbers.propertyValue}</td>;\r\n            })}\r\n          </tr>\r\n          <tr className=\"striped\">\r\n            <td>Equity</td>\r\n            {projectedNumbersByYear.map((numbers) => {\r\n              return <td>{numbers.equity}</td>;\r\n            })}\r\n          </tr>\r\n          <tr>\r\n            <td>Loan Balance</td>\r\n            {projectedNumbersByYear.map((numbers) => {\r\n              return <td>{numbers.loanBalance}</td>;\r\n            })}\r\n          </tr>\r\n          <tr className=\"striped\">\r\n            <td>Total Profit If Sold</td>\r\n            {projectedNumbersByYear.map((numbers) => {\r\n              return <td>{numbers.totalProfitIfSold}</td>;\r\n            })}\r\n          </tr>\r\n          <tr>\r\n            <td>Annualized Total Return</td>\r\n            {projectedNumbersByYear.map((numbers) => {\r\n              return <td>{numbers.annualizedTotalReturn}</td>;\r\n            })}\r\n          </tr>\r\n        </tbody>\r\n      </Table>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default AnalysisOverTime;\r\n","import { Data } from \"../BuyAndHoldCalculator\";\r\nimport {\r\n  toCurrency,\r\n  calculateProjectedTotalAnnualIncome,\r\n  calculateProjectedTotalAnnualExpenses,\r\n  calculateProjectedAnnualOperatingExpenses,\r\n  calculateMonthlyMortgagePayment,\r\n  calculateProjectedTotalAnnualCashflow,\r\n  calculateProjectedCashOnCashROI,\r\n  calculateProjectedPropertyValue,\r\n  calculateProjectedEquity,\r\n  calculateProjectedLoanBalance,\r\n  calculateProjectedTotalProfitIfSold,\r\n  calculateProjectedAnnualizedTotalReturn,\r\n} from \"../../helpers\";\r\nimport { ProjectedData } from \"./AnalysisOverTime\";\r\n\r\nexport const calculateAnalysisOverTime = (data: Data) => {\r\n  const projectionYears = [1, 2, 5, 10, 15, 20, 30];\r\n  // var t0 = performance.now();\r\n\r\n  // console.log(\"Starting...\");\r\n  const projectedNumbersByYear = projectionYears.map((year) => {\r\n    // console.log(\"Starting 1...\");\r\n    const projectedYear = year - 1;\r\n\r\n    // var t0 = performance.now();\r\n\r\n    const totalIncome = `$${toCurrency(\r\n      calculateProjectedTotalAnnualIncome(data, projectedYear)\r\n    )}`;\r\n\r\n    // var t1 = performance.now();\r\n    // console.log(\"Calculate totalIncome took \" + (t1 - t0) + \" milliseconds.\");\r\n\r\n    const totalExpenses = `$${toCurrency(\r\n      calculateProjectedTotalAnnualExpenses(data, projectedYear)\r\n    )}`;\r\n\r\n    // var t2 = performance.now();\r\n\r\n    // console.log(\"Calculate totalExpenses took \" + (t2 - t1) + \" milliseconds.\");\r\n\r\n    const operatingExpenses = `$${toCurrency(\r\n      calculateProjectedAnnualOperatingExpenses(data, projectedYear)\r\n    )}`;\r\n\r\n    // var t3 = performance.now();\r\n\r\n    // console.log(\"Calculate totalExpenses took \" + (t3 - t2) + \" milliseconds.\");\r\n\r\n    const mortgagePayment = `$${toCurrency(\r\n      calculateMonthlyMortgagePayment(data) * 12\r\n    )}`;\r\n\r\n    // var t4 = performance.now();\r\n\r\n    // console.log(\r\n    //   \"Calculate mortgagePayment took \" + (t4 - t3) + \" milliseconds.\"\r\n    // );\r\n\r\n    const totalCashflow = `$${toCurrency(\r\n      calculateProjectedTotalAnnualCashflow(data, projectedYear)\r\n    )}`;\r\n\r\n    // var t5 = performance.now();\r\n\r\n    // console.log(\"Calculate totalCashflow took \" + (t5 - t4) + \" milliseconds.\");\r\n\r\n    const cashOnCashROI = `${toCurrency(\r\n      calculateProjectedCashOnCashROI(data, projectedYear)\r\n    )}%`;\r\n\r\n    // var t6 = performance.now();\r\n\r\n    // console.log(\"Calculate cashOnCashROI took \" + (t6 - t5) + \" milliseconds.\");\r\n\r\n    const propertyValue = `$${toCurrency(\r\n      calculateProjectedPropertyValue(data, year)\r\n    )}`;\r\n\r\n    // var t7 = performance.now();\r\n\r\n    // console.log(\"Calculate propertyValue took \" + (t7 - t6) + \" milliseconds.\");\r\n\r\n    const equity = `$${toCurrency(calculateProjectedEquity(data, year))}`;\r\n\r\n    // var t8 = performance.now();\r\n\r\n    // console.log(\"Calculate equity took \" + (t8 - t7) + \" milliseconds.\");\r\n\r\n    const loanBalance = `$${toCurrency(\r\n      calculateProjectedLoanBalance(data, year)\r\n    )}`;\r\n\r\n    // var t9 = performance.now();\r\n\r\n    // console.log(\"Calculate loanBalance took \" + (t9 - t8) + \" milliseconds.\");\r\n\r\n    const totalProfitIfSold = `$${toCurrency(\r\n      calculateProjectedTotalProfitIfSold(data, year)\r\n    )}`;\r\n\r\n    // var t10 = performance.now();\r\n\r\n    // console.log(\r\n    //   \"Calculate totalProfitIfSold took \" + (t10 - t9) + \" milliseconds.\"\r\n    // );\r\n\r\n    const annualizedTotalReturn = `${toCurrency(\r\n      calculateProjectedAnnualizedTotalReturn(data, year)\r\n    )}%`;\r\n\r\n    // var t11 = performance.now();\r\n\r\n    // console.log(\r\n    //   \"Calculate annualizedTotalReturn took \" + (t11 - t10) + \" milliseconds.\"\r\n    // );\r\n\r\n    // console.log(\"Calculate everthing took \" + (t11 - t0) + \" milliseconds.\");\r\n    // console.log(\"Ending 1...\");\r\n\r\n    return {\r\n      projectionYear: year,\r\n      totalIncome: totalIncome,\r\n      totalExpenses: totalExpenses,\r\n      operatingExpenses: operatingExpenses,\r\n      mortgagePayment: mortgagePayment,\r\n      totalCashflow: totalCashflow,\r\n      cashOnCashROI: cashOnCashROI,\r\n      propertyValue: propertyValue,\r\n      equity: equity,\r\n      loanBalance: loanBalance,\r\n      totalProfitIfSold: totalProfitIfSold,\r\n      annualizedTotalReturn: annualizedTotalReturn,\r\n    } as ProjectedData;\r\n  });\r\n\r\n  // console.log(\"Ending...\");\r\n\r\n  // var t1 = performance.now();\r\n\r\n  // console.log(\r\n  //   \"Calculate projectedNumbersByYear took \" + (t1 - t0) + \" milliseconds.\"\r\n  // );\r\n\r\n  return projectedNumbersByYear;\r\n};\r\n","import React from \"react\";\r\nimport { Data } from \"../BuyAndHoldCalculator\";\r\nimport LoanBalanceValueEquity from \"./LoanBalanceValueEquity\";\r\nimport ReportSummary from \"./ReportSummary\";\r\nimport AnalysisOverTime from \"./AnalysisOverTime\";\r\n\r\ninterface Props {\r\n  data: Data;\r\n}\r\n\r\nconst Report = ({ data }: Props) => {\r\n  return (\r\n    <>\r\n      <ReportSummary data={data} />\r\n      <AnalysisOverTime data={data} />\r\n      <LoanBalanceValueEquity data={data} />\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Report;\r\n"],"sourceRoot":""}