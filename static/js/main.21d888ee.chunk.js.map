{"version":3,"sources":["SingleInput.tsx","TotalProjectCost.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["SingleInput","label","inputName","inputValue","additionalInfoText","handleOnChange","disabled","prefix","suffix","required","roundValue","isNumberInput","isInvalid","value","Math","ceil","className","name","onChange","type","TotalProjectCost","purchasePrice","form","App","useState","setForm","Button","variant","onClick","style","marginRight","event","trimmedValue","target","replace","isNaN","Number","newForm","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"wQAgEeA,EAhDK,SAAC,GAYP,IAXZC,EAWW,EAXXA,MACAC,EAUW,EAVXA,UACAC,EASW,EATXA,WACAC,EAQW,EARXA,mBACAC,EAOW,EAPXA,eACAC,EAMW,EANXA,SACAC,EAKW,EALXA,OACAC,EAIW,EAJXA,OACAC,EAGW,EAHXA,SAGW,IAFXC,kBAEW,SADXC,EACW,EADXA,cAEIC,EAAY,GACZH,IAAaN,IACfS,EAAY,cAGd,IAAIC,EAAQH,EAAaI,KAAKC,KAAKZ,GAAcA,EAIjD,OACE,yBAAKa,UAAU,yBACb,2BAAOA,UAAU,YAAYf,GAC7B,yBAAKe,UAAU,YACb,yBAAKA,UAAU,eACb,yBAAKA,UAAU,uBACb,0BAAMA,UAAU,oBAAoBT,IAEtC,2BACES,UAAW,gBAAkBJ,EAC7BK,KAAMf,EACNW,MAAOA,EACPK,SAAUb,EACVC,SAAUA,EACVa,KAAMR,EAAgB,SAAW,KAEnC,yBAAKK,UAAU,sBACb,0BAAMA,UAAU,oBAAoBR,MAI1C,yBAAKQ,UAAU,YAAYZ,KC9BlBgB,EAnBU,SAAC,GAGZ,IAFJC,EAEG,EAFXC,KAAQD,cACRhB,EACW,EADXA,eAEA,OACE,6BACE,wDACA,kBAAC,EAAD,CACEJ,MAAM,iBACNE,WAAYkB,EACZnB,UAAU,gBACVG,eAAgBA,EAChBE,OAAQ,IACRE,UAAU,MCkCHc,EAnCH,WAAO,IAAD,EACQC,mBAAS,IADjB,mBACTF,EADS,KACHG,EADG,KAchB,OACE,yBAAKT,UAAU,OACb,yBAAKA,UAAU,aACb,wBAAIA,UAAU,eAAd,iBAEA,wBAAIA,UAAU,UAEd,kBAACU,EAAA,EAAD,CACEC,QAAQ,UACRC,QAAS,aACTZ,UAAU,cACVa,MAAO,CAAEC,YAAa,SAJxB,iBAQA,kBAAC,EAAD,CAAkBR,KAAMA,EAAMjB,eA3Bb,SAAC0B,GACtB,IAAMC,EAAeD,EAAME,OAAOpB,MAAMqB,QAAQ,KAAM,IACtD,IAAKC,MAAMC,OAAOJ,IAAgB,CAChC,IAAMK,EAAO,eACRf,EADQ,eAEVS,EAAME,OAAOhB,KAAOmB,OAAOJ,KAE9BP,EAAQY,UCnBMC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCXNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDgIpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.21d888ee.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\ninterface Props {\r\n  label: string;\r\n  inputName: string;\r\n  inputValue: number;\r\n  additionalInfoText?: string;\r\n  disabled?: boolean;\r\n  prefix?: string;\r\n  suffix?: string;\r\n  required?: boolean;\r\n  roundValue?: boolean;\r\n  isNumberInput?: boolean;\r\n  handleOnChange: (event: React.ChangeEvent<HTMLInputElement>) => void;\r\n}\r\n\r\nconst SingleInput = ({\r\n  label,\r\n  inputName,\r\n  inputValue,\r\n  additionalInfoText,\r\n  handleOnChange,\r\n  disabled,\r\n  prefix,\r\n  suffix,\r\n  required,\r\n  roundValue = true,\r\n  isNumberInput,\r\n}: Props) => {\r\n  let isInvalid = \"\";\r\n  if (required && !inputValue) {\r\n    isInvalid = \"is-invalid\";\r\n  }\r\n\r\n  let value = roundValue ? Math.ceil(inputValue) : inputValue;\r\n\r\n  //   value = value && !isNaN(value) ? Number(value).toCurrency() : \"\";\r\n\r\n  return (\r\n    <div className=\"input-group row py-1 \">\r\n      <label className=\"col-md-2\">{label}</label>\r\n      <div className=\"col-md-4\">\r\n        <div className=\"input-group\">\r\n          <div className=\"input-group-prepend\">\r\n            <span className=\"input-group-text\">{prefix}</span>\r\n          </div>\r\n          <input\r\n            className={\"form-control \" + isInvalid}\r\n            name={inputName}\r\n            value={value}\r\n            onChange={handleOnChange}\r\n            disabled={disabled}\r\n            type={isNumberInput ? \"number\" : \"\"}\r\n          />\r\n          <div className=\"input-group-append\">\r\n            <span className=\"input-group-text\">{suffix}</span>\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <div className=\"col-md-2\">{additionalInfoText}</div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SingleInput;\r\n","import React from \"react\";\r\nimport \"./App.css\";\r\nimport SingleInput from \"./SingleInput\";\r\nimport { Form } from \"./App\";\r\n\r\ninterface Props {\r\n  form: Form;\r\n  handleOnChange: (event: React.ChangeEvent<HTMLInputElement>) => void;\r\n}\r\n\r\nconst TotalProjectCost = ({\r\n  form: { purchasePrice },\r\n  handleOnChange,\r\n}: Props) => {\r\n  return (\r\n    <div>\r\n      <h2>1) Total Project Cost: $</h2>\r\n      <SingleInput\r\n        label=\"Purchase Price\"\r\n        inputValue={purchasePrice}\r\n        inputName=\"purchasePrice\"\r\n        handleOnChange={handleOnChange}\r\n        prefix={\"$\"}\r\n        required={true}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default TotalProjectCost;\r\n","import React, { useState } from \"react\";\nimport \"./App.css\";\nimport { Button } from \"react-bootstrap\";\nimport TotalProjectCost from \"./TotalProjectCost\";\n\nexport interface Form {\n  address: string;\n  purchasePrice: number;\n  purchaseClosingCosts: number;\n  loanPeriod: number;\n  interestRate: number;\n  downPaymentPercentage: number;\n  vacancyRate: number;\n  repairsRate: number;\n  capitalExpendituresRate: number;\n  insuranceRate: number;\n  taxRate: number;\n  propertyManagementRate: number;\n  projectionYear: number;\n  appreciation: number;\n}\n\nconst App = () => {\n  const [form, setForm] = useState({} as Form);\n  const handleOnChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    const trimmedValue = event.target.value.replace(/,/g, \"\");\n    if (!isNaN(Number(trimmedValue))) {\n      const newForm = {\n        ...form,\n        [event.target.name]: Number(trimmedValue),\n      };\n      setForm(newForm);\n\n      // setSavedForm(newForm);\n    }\n  };\n  return (\n    <div className=\"App\">\n      <div className=\"container\">\n        <h1 className=\"text-center\">RE Calculator</h1>\n\n        <hr className=\"solid\" />\n\n        <Button\n          variant=\"primary\"\n          onClick={() => {}}\n          className=\"float-right\"\n          style={{ marginRight: \"10px\" }}\n        >\n          Reset Numbers\n        </Button>\n        <TotalProjectCost form={form} handleOnChange={handleOnChange} />\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}