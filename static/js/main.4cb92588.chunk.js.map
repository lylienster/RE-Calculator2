{"version":3,"sources":["helpers.tsx","SingleInput.tsx","TotalProjectCost.tsx","PropertyInfo.tsx","DefaultValues.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["toCurrency","number","toLocaleString","undefined","maximumFractionDigits","calculateTotalProjectCost","purchasePrice","estimatedRepairs","purchaseClosingCosts","preRentHoldingCosts","useLocalStorage","key","initialValue","useState","item","window","localStorage","getItem","JSON","parse","error","console","log","storedValue","setStoredValue","value","valueToStore","Function","setItem","stringify","SingleInput","label","inputName","inputValue","additionalInfoText","handleOnChange","disabled","prefix","suffix","required","roundValue","isNumberInput","isInvalid","Math","ceil","strValue","Number","className","name","onChange","type","TotalProjectCost","form","PropertyInfo","handleTextOnChange","askingPrice","address","DefaultValues","defaults","handleOnSubmit","React","localDefaults","setLocalDefaults","event","trimmedValue","target","replace","isNaN","showModal","setShowModal","handleClose","loanPeriod","interestRate","downPaymentPercentage","vacancyRate","repairsRate","capitalExpendituresRate","insuranceRate","taxRate","propertyManagementRate","projectionYear","appreciation","Button","variant","onClick","Modal","show","onHide","size","Header","closeButton","Title","Body","Footer","App","initialDefaults","setDefaults","savedForm","setSavedForm","setForm","newForm","newDefaults","style","marginRight","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.4cb92588.chunk.js","sourcesContent":["import { Form } from \"./App\";\r\nimport { useState } from \"react\";\r\n\r\nexport const toCurrency = (number: number): string => {\r\n  const formattedValue = number.toLocaleString(undefined, {\r\n    maximumFractionDigits: 2,\r\n  });\r\n\r\n  return formattedValue;\r\n};\r\n\r\nexport const calculateTotalProjectCost = ({\r\n  purchasePrice,\r\n  estimatedRepairs,\r\n  purchaseClosingCosts,\r\n  preRentHoldingCosts,\r\n}: Form) => {\r\n  const totalProjectCost =\r\n    (purchasePrice || 0) +\r\n    (estimatedRepairs || 0) +\r\n    (purchaseClosingCosts || 0) +\r\n    (preRentHoldingCosts || 0);\r\n  return totalProjectCost;\r\n};\r\n\r\nexport const useLocalStorage = (key: string, initialValue: any) => {\r\n  // State to store our value\r\n  // Pass initial state function to useState so logic is only executed once\r\n  const [storedValue, setStoredValue] = useState(() => {\r\n    try {\r\n      // Get from local storage by key\r\n      const item = window.localStorage.getItem(key);\r\n      // Parse stored json or if none return initialValue\r\n      return item ? JSON.parse(item) : initialValue;\r\n    } catch (error) {\r\n      // If error also return initialValue\r\n      console.log(error);\r\n      return initialValue;\r\n    }\r\n  });\r\n\r\n  // Return a wrapped version of useState's setter function that ...\r\n  // ... persists the new value to localStorage.\r\n  const setValue = (value: any) => {\r\n    try {\r\n      // Allow value to be a function so we have same API as useState\r\n      const valueToStore =\r\n        value instanceof Function ? value(storedValue) : value;\r\n      // Save state\r\n      setStoredValue(valueToStore);\r\n      // Save to local storage\r\n      window.localStorage.setItem(key, JSON.stringify(valueToStore));\r\n    } catch (error) {\r\n      // A more advanced implementation would handle the error case\r\n      console.log(error);\r\n    }\r\n  };\r\n\r\n  return [storedValue, setValue];\r\n};\r\n","import React from \"react\";\r\nimport { toCurrency } from \"./helpers\";\r\n\r\ninterface Props {\r\n  label: string;\r\n  inputName?: string;\r\n  inputValue: number;\r\n  additionalInfoText?: string;\r\n  disabled?: boolean;\r\n  prefix?: string;\r\n  suffix?: string;\r\n  required?: boolean;\r\n  roundValue?: boolean;\r\n  isNumberInput?: boolean;\r\n  handleOnChange?: (event: React.ChangeEvent<HTMLInputElement>) => void;\r\n}\r\n\r\nconst SingleInput = ({\r\n  label,\r\n  inputName,\r\n  inputValue,\r\n  additionalInfoText,\r\n  handleOnChange,\r\n  disabled,\r\n  prefix,\r\n  suffix,\r\n  required,\r\n  roundValue = true,\r\n  isNumberInput,\r\n}: Props) => {\r\n  let isInvalid = \"\";\r\n  if (required && !inputValue) {\r\n    isInvalid = \"is-invalid\";\r\n  }\r\n\r\n  let value = roundValue ? Math.ceil(inputValue) : inputValue;\r\n\r\n  const strValue = value ? toCurrency(Number(value)) : \"\";\r\n\r\n  return (\r\n    <div className=\"input-group row py-1 \">\r\n      <label className=\"col-md-2\">{label}</label>\r\n      <div className=\"col-md-4\">\r\n        <div className=\"input-group\">\r\n          <div className=\"input-group-prepend\">\r\n            <span className=\"input-group-text\">{prefix}</span>\r\n          </div>\r\n          <input\r\n            className={\"form-control \" + isInvalid}\r\n            name={inputName}\r\n            value={strValue}\r\n            onChange={handleOnChange}\r\n            disabled={disabled}\r\n            type={isNumberInput ? \"number\" : \"\"}\r\n          />\r\n          <div className=\"input-group-append\">\r\n            <span className=\"input-group-text\">{suffix}</span>\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <div className=\"col-md-2\">{additionalInfoText}</div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SingleInput;\r\n","import React from \"react\";\r\nimport SingleInput from \"./SingleInput\";\r\nimport { Form } from \"./App\";\r\nimport { calculateTotalProjectCost, toCurrency } from \"./helpers\";\r\n\r\ninterface Props {\r\n  form: Form;\r\n  handleOnChange: (event: React.ChangeEvent<HTMLInputElement>) => void;\r\n}\r\n\r\nconst TotalProjectCost = ({ form, handleOnChange }: Props) => {\r\n  const {\r\n    purchasePrice,\r\n    purchaseClosingCosts,\r\n    preRentHoldingCosts,\r\n    estimatedRepairs,\r\n  } = form;\r\n  return (\r\n    <div>\r\n      <h2>\r\n        1) Total Project Cost: ${toCurrency(calculateTotalProjectCost(form))}\r\n      </h2>\r\n      <SingleInput\r\n        label=\"Purchase Price\"\r\n        inputValue={purchasePrice}\r\n        inputName=\"purchasePrice\"\r\n        handleOnChange={handleOnChange}\r\n        prefix={\"$\"}\r\n        required={true}\r\n      />\r\n      <SingleInput\r\n        label=\"Purchase Closing Costs\"\r\n        inputValue={purchaseClosingCosts}\r\n        inputName=\"purchaseClosingCosts\"\r\n        handleOnChange={handleOnChange}\r\n        prefix={\"$\"}\r\n      />\r\n\r\n      <SingleInput\r\n        label=\"Pre-Rent Holding Costs\"\r\n        inputValue={preRentHoldingCosts}\r\n        inputName=\"preRentHoldingCosts\"\r\n        handleOnChange={handleOnChange}\r\n        prefix={\"$\"}\r\n      />\r\n\r\n      <SingleInput\r\n        label=\"Estimated Repairs\"\r\n        inputValue={estimatedRepairs}\r\n        inputName=\"estimatedRepairs\"\r\n        handleOnChange={handleOnChange}\r\n        prefix={\"$\"}\r\n      />\r\n\r\n      <SingleInput\r\n        label=\"Total Project Cost\"\r\n        inputValue={calculateTotalProjectCost(form)}\r\n        prefix={\"$\"}\r\n        disabled={true}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default TotalProjectCost;\r\n","import React from \"react\";\r\nimport SingleInput from \"./SingleInput\";\r\nimport { Form } from \"./App\";\r\n\r\ninterface Props {\r\n  form: Form;\r\n  handleOnChange: (event: React.ChangeEvent<HTMLInputElement>) => void;\r\n  handleTextOnChange: (event: React.ChangeEvent<HTMLInputElement>) => void;\r\n}\r\n\r\nconst PropertyInfo = ({ form, handleOnChange, handleTextOnChange }: Props) => {\r\n  const { askingPrice } = form;\r\n  return (\r\n    <div>\r\n      <div className=\"input-group row py-1\">\r\n        <label className=\"col-md-2\">Address</label>\r\n        <div className=\"col-md-4\">\r\n          <div className=\"input-group\">\r\n            <input\r\n              className={\"form-control\"}\r\n              name={\"address\"}\r\n              value={form.address}\r\n              onChange={handleTextOnChange}\r\n              type={\"text\"}\r\n            />\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <SingleInput\r\n        label=\"Asking Price\"\r\n        inputName=\"askingPrice\"\r\n        inputValue={askingPrice}\r\n        handleOnChange={handleOnChange}\r\n        prefix={\"$\"}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default PropertyInfo;\r\n","import React from \"react\";\r\nimport SingleInput from \"./SingleInput\";\r\nimport { Form } from \"./App\";\r\nimport { Button, Modal } from \"react-bootstrap\";\r\n\r\ninterface Props {\r\n  defaults: Form;\r\n  handleOnSubmit: (defaults: Form) => void;\r\n}\r\n\r\nconst DefaultValues = ({ defaults, handleOnSubmit }: Props) => {\r\n  const [localDefaults, setLocalDefaults] = React.useState({ ...defaults });\r\n\r\n  const handleOnChange = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n    const trimmedValue = event.target.value.replace(/,/g, \"\");\r\n    if (!isNaN(Number(trimmedValue))) {\r\n      setLocalDefaults({\r\n        ...localDefaults,\r\n        [event.target.name]: Number(trimmedValue),\r\n      });\r\n    }\r\n  };\r\n\r\n  const [showModal, setShowModal] = React.useState(false);\r\n\r\n  const handleClose = () => setShowModal(false);\r\n  const handleShow = () => setShowModal(true);\r\n\r\n  const handleOnSumbit = () => {\r\n    handleOnSubmit(localDefaults);\r\n\r\n    handleClose();\r\n  };\r\n\r\n  const {\r\n    purchaseClosingCosts,\r\n    loanPeriod,\r\n    interestRate,\r\n    downPaymentPercentage,\r\n    vacancyRate,\r\n    repairsRate,\r\n    capitalExpendituresRate,\r\n    insuranceRate,\r\n    taxRate,\r\n    propertyManagementRate,\r\n    projectionYear,\r\n    appreciation,\r\n  } = localDefaults;\r\n\r\n  return (\r\n    <>\r\n      <Button variant=\"primary\" onClick={handleShow} className=\"float-right\">\r\n        Edit Defaults\r\n      </Button>\r\n      <Modal show={showModal} onHide={handleClose} size=\"lg\">\r\n        <Modal.Header closeButton>\r\n          <Modal.Title>Defaults</Modal.Title>\r\n        </Modal.Header>\r\n        <Modal.Body>\r\n          <form>\r\n            <div>\r\n              <SingleInput\r\n                label=\"Purchase Closing Costs\"\r\n                inputName=\"purchaseClosingCosts\"\r\n                inputValue={purchaseClosingCosts}\r\n                handleOnChange={handleOnChange}\r\n                prefix={\"$\"}\r\n              />\r\n              <SingleInput\r\n                label=\"Loan Period\"\r\n                inputName=\"loanPeriod\"\r\n                inputValue={loanPeriod}\r\n                handleOnChange={handleOnChange}\r\n                suffix={\"years\"}\r\n                roundValue={false}\r\n                isNumberInput\r\n              />\r\n              <SingleInput\r\n                label=\"Interest Rate\"\r\n                inputName=\"interestRate\"\r\n                inputValue={interestRate}\r\n                handleOnChange={handleOnChange}\r\n                suffix={\"%\"}\r\n                roundValue={false}\r\n                isNumberInput\r\n              />\r\n              <SingleInput\r\n                label=\"Down Payment Percentage\"\r\n                inputName=\"downPaymentPercentage\"\r\n                inputValue={downPaymentPercentage}\r\n                handleOnChange={handleOnChange}\r\n                suffix={\"%\"}\r\n                roundValue={false}\r\n                isNumberInput\r\n              />\r\n              <SingleInput\r\n                label=\"Vacancy Rate\"\r\n                inputName=\"vacancyRate\"\r\n                inputValue={vacancyRate}\r\n                handleOnChange={handleOnChange}\r\n                suffix={\"%\"}\r\n                roundValue={false}\r\n                isNumberInput\r\n              />\r\n              <SingleInput\r\n                label=\"Repair Percentage\"\r\n                inputName=\"repairsRate\"\r\n                inputValue={repairsRate}\r\n                handleOnChange={handleOnChange}\r\n                suffix={\"%\"}\r\n                roundValue={false}\r\n                isNumberInput\r\n              />\r\n              <SingleInput\r\n                label=\"Capital Expenditure Percentage\"\r\n                inputName=\"capitalExpendituresRate\"\r\n                inputValue={capitalExpendituresRate}\r\n                handleOnChange={handleOnChange}\r\n                suffix={\"%\"}\r\n                roundValue={false}\r\n                isNumberInput\r\n              />\r\n              <SingleInput\r\n                label=\"Insurance Rate\"\r\n                inputName=\"insuranceRate\"\r\n                inputValue={insuranceRate}\r\n                handleOnChange={handleOnChange}\r\n                suffix={\"%\"}\r\n                roundValue={false}\r\n                isNumberInput\r\n              />\r\n              <SingleInput\r\n                label=\"Tax Rate\"\r\n                inputName=\"taxRate\"\r\n                inputValue={taxRate}\r\n                handleOnChange={handleOnChange}\r\n                suffix={\"%\"}\r\n                roundValue={false}\r\n                isNumberInput\r\n              />\r\n              <SingleInput\r\n                label=\"Property Management Rate\"\r\n                inputName=\"propertyManagementRate\"\r\n                inputValue={propertyManagementRate}\r\n                handleOnChange={handleOnChange}\r\n                suffix={\"%\"}\r\n                roundValue={false}\r\n                isNumberInput\r\n              />\r\n              <SingleInput\r\n                label=\"Projection Year\"\r\n                inputName=\"projectionYear\"\r\n                inputValue={projectionYear}\r\n                handleOnChange={handleOnChange}\r\n                suffix={\"years\"}\r\n                roundValue={false}\r\n                isNumberInput\r\n              />\r\n              <SingleInput\r\n                label=\"Appreciation\"\r\n                inputName=\"appreciation\"\r\n                inputValue={appreciation}\r\n                handleOnChange={handleOnChange}\r\n                suffix={\"%\"}\r\n                roundValue={false}\r\n                isNumberInput\r\n              />\r\n            </div>\r\n          </form>\r\n        </Modal.Body>\r\n        <Modal.Footer>\r\n          <Button variant=\"primary\" onClick={handleOnSumbit}>\r\n            Save Changes\r\n          </Button>\r\n        </Modal.Footer>\r\n      </Modal>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default DefaultValues;\r\n","import React, { useState } from \"react\";\nimport \"./App.css\";\nimport { Button } from \"react-bootstrap\";\nimport TotalProjectCost from \"./TotalProjectCost\";\nimport { useLocalStorage } from \"./helpers\";\nimport PropertyInfo from \"./PropertyInfo\";\nimport DefaultValues from \"./DefaultValues\";\n\nexport interface Form {\n  address: string;\n  purchasePrice: number;\n  purchaseClosingCosts: number;\n  loanPeriod: number;\n  interestRate: number;\n  downPaymentPercentage: number;\n  vacancyRate: number;\n  repairsRate: number;\n  capitalExpendituresRate: number;\n  insuranceRate: number;\n  taxRate: number;\n  propertyManagementRate: number;\n  projectionYear: number;\n  appreciation: number;\n  preRentHoldingCosts: number;\n  estimatedRepairs: number;\n  askingPrice: number;\n}\n\nconst App = () => {\n  const initialDefaults = {\n    address: \"\",\n    purchaseClosingCosts: 5000,\n    loanPeriod: 30,\n    interestRate: 5,\n    downPaymentPercentage: 20,\n    vacancyRate: 5,\n    repairsRate: 5,\n    capitalExpendituresRate: 12.5,\n    insuranceRate: 0.5,\n    taxRate: 1.06,\n    propertyManagementRate: 11,\n    projectionYear: 5,\n    appreciation: 4.4,\n  };\n\n  const [defaults, setDefaults] = useLocalStorage(\"defaults\", initialDefaults);\n  const [savedForm, setSavedForm] = useLocalStorage(\"form\", initialDefaults);\n\n  const [form, setForm] = React.useState(savedForm || initialDefaults);\n  const handleOnChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    const trimmedValue = event.target.value.replace(/,/g, \"\");\n    if (!isNaN(Number(trimmedValue))) {\n      const newForm = {\n        ...form,\n        [event.target.name]: Number(trimmedValue),\n      };\n      setForm(newForm);\n\n      setSavedForm(newForm);\n    }\n  };\n\n  const handleTextOnChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    const newForm = {\n      ...form,\n      [event.target.name]: event.target.value,\n    };\n    setForm(newForm);\n\n    setSavedForm(newForm);\n  };\n\n  const handleDefaultsSubmission = (newDefaults: Form) => {\n    const newDefaultsString = newDefaults;\n\n    setDefaults(newDefaultsString);\n    const newForm = { ...form, ...newDefaults };\n    setForm(newForm);\n    setSavedForm(newForm);\n  };\n\n  return (\n    <div className=\"App\">\n      <div className=\"container\">\n        <h1 className=\"text-center\">RE Calculator</h1>\n\n        <hr className=\"solid\" />\n        <DefaultValues\n          defaults={defaults}\n          handleOnSubmit={handleDefaultsSubmission}\n        />\n        <div>\n          <Button\n            variant=\"primary\"\n            onClick={() => {}}\n            className=\"float-right clear-fix\"\n            style={{ marginRight: \"10px\" }}\n          >\n            Reset Numbers\n          </Button>\n          <br />\n        </div>\n        <form>\n          <PropertyInfo\n            form={form}\n            handleOnChange={handleOnChange}\n            handleTextOnChange={handleTextOnChange}\n          />\n          <TotalProjectCost form={form} handleOnChange={handleOnChange} />\n        </form>\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}